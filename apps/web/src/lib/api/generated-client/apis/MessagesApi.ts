/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  MessageCreateInput,
  PaginationMessageResponse
} from '../models/index';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  MessageCreateInputFromJSON,
  MessageCreateInputToJSON,
  PaginationMessageResponseFromJSON,
  PaginationMessageResponseToJSON
} from '../models/index';

export interface CreateMessageThreadsThreadIdMessagesPostRequest {
  threadId: string;
  messageCreateInput: MessageCreateInput;
}

export interface DeleteMessageThreadsThreadIdMessagesMessageIdDeleteRequest {
  threadId: string;
  messageId: string;
}

export interface GetMessagesThreadsThreadIdMessagesGetRequest {
  threadId: string;
  limit?: number;
  offset?: number;
  order?: GetMessagesThreadsThreadIdMessagesGetOrderEnum;
}

/**
 * MessagesApi - interface
 *
 * @export
 * @interface MessagesApiInterface
 */
export interface MessagesApiInterface {
  /**
   * Creates a new message in the given thread. Will interact with the agent
   * and return a stream of message chunks.
   *
   * @memberof MessagesApiInterface
   * @param {string} threadId The unique identifier of the thread. Can be
   *   either the internal ID or external ID.
   * @param {MessageCreateInput} messageCreateInput
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Create Message
   */
  createMessageThreadsThreadIdMessagesPostRaw(
    requestParameters: CreateMessageThreadsThreadIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /**
   * Creates a new message in the given thread. Will interact with the agent
   * and return a stream of message chunks. Create Message
   */
  createMessageThreadsThreadIdMessagesPost(
    requestParameters: CreateMessageThreadsThreadIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * @memberof MessagesApiInterface
   * @param {string} threadId The unique identifier of the thread. Can be
   *   either the internal ID or external ID.
   * @param {string} messageId The unique identifier of the message.
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Delete Message
   */
  deleteMessageThreadsThreadIdMessagesMessageIdDeleteRaw(
    requestParameters: DeleteMessageThreadsThreadIdMessagesMessageIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /** Delete Message */
  deleteMessageThreadsThreadIdMessagesMessageIdDelete(
    requestParameters: DeleteMessageThreadsThreadIdMessagesMessageIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Retrieves all messages for a given thread. Returns a list of all messages
   * by default in descending chronological order (newest first).
   *
   * @memberof MessagesApiInterface
   * @param {string} threadId The unique identifier of the thread. Can be
   *   either the internal ID or external ID.
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {'asc' | 'desc'} [order]
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Get Messages
   */
  getMessagesThreadsThreadIdMessagesGetRaw(
    requestParameters: GetMessagesThreadsThreadIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginationMessageResponse>>;

  /**
   * Retrieves all messages for a given thread. Returns a list of all messages
   * by default in descending chronological order (newest first). Get
   * Messages
   */
  getMessagesThreadsThreadIdMessagesGet(
    requestParameters: GetMessagesThreadsThreadIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginationMessageResponse>;
}

export class MessagesApi
  extends runtime.BaseAPI
  implements MessagesApiInterface
{
  /**
   * Creates a new message in the given thread. Will interact with the agent
   * and return a stream of message chunks. Create Message
   */
  async createMessageThreadsThreadIdMessagesPostRaw(
    requestParameters: CreateMessageThreadsThreadIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['threadId'] == null) {
      throw new runtime.RequiredError(
        'threadId',
        'Required parameter "threadId" was null or undefined when calling createMessageThreadsThreadIdMessagesPost().'
      );
    }

    if (requestParameters['messageCreateInput'] == null) {
      throw new runtime.RequiredError(
        'messageCreateInput',
        'Required parameter "messageCreateInput" was null or undefined when calling createMessageThreadsThreadIdMessagesPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads/{thread_id}/messages`.replace(
          `{${'thread_id'}}`,
          encodeURIComponent(String(requestParameters['threadId']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: MessageCreateInputToJSON(requestParameters['messageCreateInput'])
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /**
   * Creates a new message in the given thread. Will interact with the agent
   * and return a stream of message chunks. Create Message
   */
  async createMessageThreadsThreadIdMessagesPost(
    requestParameters: CreateMessageThreadsThreadIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.createMessageThreadsThreadIdMessagesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Delete Message */
  async deleteMessageThreadsThreadIdMessagesMessageIdDeleteRaw(
    requestParameters: DeleteMessageThreadsThreadIdMessagesMessageIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['threadId'] == null) {
      throw new runtime.RequiredError(
        'threadId',
        'Required parameter "threadId" was null or undefined when calling deleteMessageThreadsThreadIdMessagesMessageIdDelete().'
      );
    }

    if (requestParameters['messageId'] == null) {
      throw new runtime.RequiredError(
        'messageId',
        'Required parameter "messageId" was null or undefined when calling deleteMessageThreadsThreadIdMessagesMessageIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads/{thread_id}/messages/{message_id}`
          .replace(
            `{${'thread_id'}}`,
            encodeURIComponent(String(requestParameters['threadId']))
          )
          .replace(
            `{${'message_id'}}`,
            encodeURIComponent(String(requestParameters['messageId']))
          ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /** Delete Message */
  async deleteMessageThreadsThreadIdMessagesMessageIdDelete(
    requestParameters: DeleteMessageThreadsThreadIdMessagesMessageIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response =
      await this.deleteMessageThreadsThreadIdMessagesMessageIdDeleteRaw(
        requestParameters,
        initOverrides
      );
    return await response.value();
  }

  /**
   * Retrieves all messages for a given thread. Returns a list of all messages
   * by default in descending chronological order (newest first). Get
   * Messages
   */
  async getMessagesThreadsThreadIdMessagesGetRaw(
    requestParameters: GetMessagesThreadsThreadIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginationMessageResponse>> {
    if (requestParameters['threadId'] == null) {
      throw new runtime.RequiredError(
        'threadId',
        'Required parameter "threadId" was null or undefined when calling getMessagesThreadsThreadIdMessagesGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    if (requestParameters['order'] != null) {
      queryParameters['order'] = requestParameters['order'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads/{thread_id}/messages`.replace(
          `{${'thread_id'}}`,
          encodeURIComponent(String(requestParameters['threadId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginationMessageResponseFromJSON(jsonValue)
    );
  }

  /**
   * Retrieves all messages for a given thread. Returns a list of all messages
   * by default in descending chronological order (newest first). Get
   * Messages
   */
  async getMessagesThreadsThreadIdMessagesGet(
    requestParameters: GetMessagesThreadsThreadIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginationMessageResponse> {
    const response = await this.getMessagesThreadsThreadIdMessagesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/** @export */
export const GetMessagesThreadsThreadIdMessagesGetOrderEnum = {
  Asc: 'asc',
  Desc: 'desc'
} as const;
export type GetMessagesThreadsThreadIdMessagesGetOrderEnum =
  (typeof GetMessagesThreadsThreadIdMessagesGetOrderEnum)[keyof typeof GetMessagesThreadsThreadIdMessagesGetOrderEnum];

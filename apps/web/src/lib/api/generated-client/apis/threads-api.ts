/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  HTTPValidationError,
  PaginationThreads,
  ThreadCreateInput,
  Threads
} from '../models/index';
import {
  HTTPValidationErrorFromJSON,
  HTTPValidationErrorToJSON,
  PaginationThreadsFromJSON,
  PaginationThreadsToJSON,
  ThreadCreateInputFromJSON,
  ThreadCreateInputToJSON,
  ThreadsFromJSON,
  ThreadsToJSON
} from '../models/index';

export interface CreateThreadThreadsPostRequest {
  threadCreateInput: ThreadCreateInput;
}

export interface DeleteThreadThreadsIdDeleteRequest {
  id: string;
}

export interface GetThreadByIdThreadsIdGetRequest {
  id: string;
}

export interface GetThreadsThreadsGetRequest {
  limit?: number;
  offset?: number;
  order?: GetThreadsThreadsGetOrderEnum;
}

/**
 * ThreadsApi - interface
 *
 * @export
 * @interface ThreadsApiInterface
 */
export interface ThreadsApiInterface {
  /**
   * Creates a new thread or returns the existing thread if it already exists.
   *
   * @memberof ThreadsApiInterface
   * @param {ThreadCreateInput} threadCreateInput
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Create Thread
   */
  createThreadThreadsPostRaw(
    requestParameters: CreateThreadThreadsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Threads>>;

  /**
   * Creates a new thread or returns the existing thread if it already exists.
   * Create Thread
   */
  createThreadThreadsPost(
    requestParameters: CreateThreadThreadsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Threads>;

  /**
   * Deletes a thread by its internal or external ID.
   *
   * @memberof ThreadsApiInterface
   * @param {string} id The unique identifier of the thread. Can be either the
   *   internal ID or external ID.
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Delete Thread
   */
  deleteThreadThreadsIdDeleteRaw(
    requestParameters: DeleteThreadThreadsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>>;

  /** Deletes a thread by its internal or external ID. Delete Thread */
  deleteThreadThreadsIdDelete(
    requestParameters: DeleteThreadThreadsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any>;

  /**
   * Retrieves a specific thread by its unique ID. Returns the thread details
   * along with its messages in descending chronological order (newest first).
   * Each message includes its full content.
   *
   * @memberof ThreadsApiInterface
   * @param {string} id The unique identifier of the thread. Can be either the
   *   internal ID or external ID.
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Get Thread By Id
   */
  getThreadByIdThreadsIdGetRaw(
    requestParameters: GetThreadByIdThreadsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Threads>>;

  /**
   * Retrieves a specific thread by its unique ID. Returns the thread details
   * along with its messages in descending chronological order (newest first).
   * Each message includes its full content. Get Thread By Id
   */
  getThreadByIdThreadsIdGet(
    requestParameters: GetThreadByIdThreadsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Threads>;

  /**
   * Retrieves all threads. Returns a list of all threads with their messages
   * by default in descending chronological order (newest first). Each message
   * includes its full content.
   *
   * @memberof ThreadsApiInterface
   * @param {number} [limit]
   * @param {number} [offset]
   * @param {'asc' | 'desc'} [order]
   * @param {any} [options] Override http request option.
   * @throws {RequiredError}
   * @summary Get Threads
   */
  getThreadsThreadsGetRaw(
    requestParameters: GetThreadsThreadsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginationThreads>>;

  /**
   * Retrieves all threads. Returns a list of all threads with their messages
   * by default in descending chronological order (newest first). Each message
   * includes its full content. Get Threads
   */
  getThreadsThreadsGet(
    requestParameters: GetThreadsThreadsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginationThreads>;
}

export class ThreadsApi extends runtime.BaseAPI implements ThreadsApiInterface {
  /**
   * Creates a new thread or returns the existing thread if it already exists.
   * Create Thread
   */
  async createThreadThreadsPostRaw(
    requestParameters: CreateThreadThreadsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Threads>> {
    if (requestParameters['threadCreateInput'] == null) {
      throw new runtime.RequiredError(
        'threadCreateInput',
        'Required parameter "threadCreateInput" was null or undefined when calling createThreadThreadsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ThreadCreateInputToJSON(requestParameters['threadCreateInput'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThreadsFromJSON(jsonValue)
    );
  }

  /**
   * Creates a new thread or returns the existing thread if it already exists.
   * Create Thread
   */
  async createThreadThreadsPost(
    requestParameters: CreateThreadThreadsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Threads> {
    const response = await this.createThreadThreadsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Deletes a thread by its internal or external ID. Delete Thread */
  async deleteThreadThreadsIdDeleteRaw(
    requestParameters: DeleteThreadThreadsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<any>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling deleteThreadThreadsIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    if (this.isJsonMime(response.headers.get('content-type'))) {
      return new runtime.JSONApiResponse<any>(response);
    } else {
      return new runtime.TextApiResponse(response) as any;
    }
  }

  /** Deletes a thread by its internal or external ID. Delete Thread */
  async deleteThreadThreadsIdDelete(
    requestParameters: DeleteThreadThreadsIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<any> {
    const response = await this.deleteThreadThreadsIdDeleteRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieves a specific thread by its unique ID. Returns the thread details
   * along with its messages in descending chronological order (newest first).
   * Each message includes its full content. Get Thread By Id
   */
  async getThreadByIdThreadsIdGetRaw(
    requestParameters: GetThreadByIdThreadsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<Threads>> {
    if (requestParameters['id'] == null) {
      throw new runtime.RequiredError(
        'id',
        'Required parameter "id" was null or undefined when calling getThreadByIdThreadsIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads/{id}`.replace(
          `{${'id'}}`,
          encodeURIComponent(String(requestParameters['id']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      ThreadsFromJSON(jsonValue)
    );
  }

  /**
   * Retrieves a specific thread by its unique ID. Returns the thread details
   * along with its messages in descending chronological order (newest first).
   * Each message includes its full content. Get Thread By Id
   */
  async getThreadByIdThreadsIdGet(
    requestParameters: GetThreadByIdThreadsIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<Threads> {
    const response = await this.getThreadByIdThreadsIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Retrieves all threads. Returns a list of all threads with their messages
   * by default in descending chronological order (newest first). Each message
   * includes its full content. Get Threads
   */
  async getThreadsThreadsGetRaw(
    requestParameters: GetThreadsThreadsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<PaginationThreads>> {
    const queryParameters: any = {};

    if (requestParameters['limit'] != null) {
      queryParameters['limit'] = requestParameters['limit'];
    }

    if (requestParameters['offset'] != null) {
      queryParameters['offset'] = requestParameters['offset'];
    }

    if (requestParameters['order'] != null) {
      queryParameters['order'] = requestParameters['order'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('HTTPBearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/threads`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      PaginationThreadsFromJSON(jsonValue)
    );
  }

  /**
   * Retrieves all threads. Returns a list of all threads with their messages
   * by default in descending chronological order (newest first). Each message
   * includes its full content. Get Threads
   */
  async getThreadsThreadsGet(
    requestParameters: GetThreadsThreadsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<PaginationThreads> {
    const response = await this.getThreadsThreadsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/** @export */
export const GetThreadsThreadsGetOrderEnum = {
  Asc: 'asc',
  Desc: 'desc'
} as const;
export type GetThreadsThreadsGetOrderEnum =
  (typeof GetThreadsThreadsGetOrderEnum)[keyof typeof GetThreadsThreadsGetOrderEnum];

/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ImageContent
 */
export interface ImageContent {
    /**
     * 
     * @type {string}
     * @memberof ImageContent
     */
    type?: ImageContentTypeEnum;
    /**
     * The raw base64 encoded image data, without any prefixes like `data:image/jpeg;base64,` for example: `iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==`
     * @type {string}
     * @memberof ImageContent
     */
    content: string;
    /**
     * The content type of the image, must start with `image/`
     * @type {string}
     * @memberof ImageContent
     */
    content_type?: ImageContentContentTypeEnum;
}


/**
 * @export
 */
export const ImageContentTypeEnum = {
    Image: 'image'
} as const;
export type ImageContentTypeEnum = typeof ImageContentTypeEnum[keyof typeof ImageContentTypeEnum];

/**
 * @export
 */
export const ImageContentContentTypeEnum = {
    ImageJpeg: 'image/jpeg',
    ImagePng: 'image/png',
    ImageGif: 'image/gif',
    ImageWebp: 'image/webp'
} as const;
export type ImageContentContentTypeEnum = typeof ImageContentContentTypeEnum[keyof typeof ImageContentContentTypeEnum];


/**
 * Check if a given object implements the ImageContent interface.
 */
export function instanceOfImageContent(value: object): value is ImageContent {
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function ImageContentFromJSON(json: any): ImageContent {
    return ImageContentFromJSONTyped(json, false);
}

export function ImageContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ImageContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'content': json['content'],
        'content_type': json['content_type'] == null ? undefined : json['content_type'],
    };
}

export function ImageContentToJSON(json: any): ImageContent {
    return ImageContentToJSONTyped(json, false);
}

export function ImageContentToJSONTyped(value?: ImageContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'content': value['content'],
        'content_type': value['content_type'],
    };
}


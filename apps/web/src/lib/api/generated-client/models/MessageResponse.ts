/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageResponseContentInner } from './MessageResponseContentInner';
import {
  MessageResponseContentInnerFromJSON,
  MessageResponseContentInnerFromJSONTyped,
  MessageResponseContentInnerToJSON,
  MessageResponseContentInnerToJSONTyped
} from './MessageResponseContentInner';

/**
 * @export
 * @interface MessageResponse
 */
export interface MessageResponse {
  /**
   * @memberof MessageResponse
   * @type {string}
   */
  id: string;
  /**
   * @memberof MessageResponse
   * @type {string}
   */
  role: MessageResponseRoleEnum;
  /**
   * @memberof MessageResponse
   * @type {string}
   */
  name?: string | null;
  /**
   * @memberof MessageResponse
   * @type {string}
   */
  tool_use_id?: string | null;
  /**
   * @memberof MessageResponse
   * @type {MessageResponseContentInner[]}
   */
  content: Array<MessageResponseContentInner>;
}

/** @export */
export const MessageResponseRoleEnum = {
  Assistant: 'assistant',
  User: 'user',
  System: 'system',
  Developer: 'developer',
  Tool: 'tool'
} as const;
export type MessageResponseRoleEnum =
  (typeof MessageResponseRoleEnum)[keyof typeof MessageResponseRoleEnum];

/** Check if a given object implements the MessageResponse interface. */
export function instanceOfMessageResponse(
  value: object
): value is MessageResponse {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('role' in value) || value['role'] === undefined) return false;
  if (!('content' in value) || value['content'] === undefined) return false;
  return true;
}

export function MessageResponseFromJSON(json: any): MessageResponse {
  return MessageResponseFromJSONTyped(json, false);
}

export function MessageResponseFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MessageResponse {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    role: json['role'],
    name: json['name'] == null ? undefined : json['name'],
    tool_use_id: json['tool_use_id'] == null ? undefined : json['tool_use_id'],
    content: (json['content'] as Array<any>).map(
      MessageResponseContentInnerFromJSON
    )
  };
}

export function MessageResponseToJSON(json: any): MessageResponse {
  return MessageResponseToJSONTyped(json, false);
}

export function MessageResponseToJSONTyped(
  value?: MessageResponse | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    role: value['role'],
    name: value['name'],
    tool_use_id: value['tool_use_id'],
    content: (value['content'] as Array<any>).map(
      MessageResponseContentInnerToJSON
    )
  };
}

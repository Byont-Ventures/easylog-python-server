/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import type { FileContent } from './FileContent';
import {
  instanceOfFileContent,
  FileContentFromJSON,
  FileContentFromJSONTyped,
  FileContentToJSON
} from './FileContent';
import type { ImageContent } from './ImageContent';
import {
  instanceOfImageContent,
  ImageContentFromJSON,
  ImageContentFromJSONTyped,
  ImageContentToJSON
} from './ImageContent';
import type { TextContent } from './TextContent';
import {
  instanceOfTextContent,
  TextContentFromJSON,
  TextContentFromJSONTyped,
  TextContentToJSON
} from './TextContent';
import type { TextDeltaContent } from './TextDeltaContent';
import {
  instanceOfTextDeltaContent,
  TextDeltaContentFromJSON,
  TextDeltaContentFromJSONTyped,
  TextDeltaContentToJSON
} from './TextDeltaContent';
import type { ToolResultContent } from './ToolResultContent';
import {
  instanceOfToolResultContent,
  ToolResultContentFromJSON,
  ToolResultContentFromJSONTyped,
  ToolResultContentToJSON
} from './ToolResultContent';
import type { ToolUseContent } from './ToolUseContent';
import {
  instanceOfToolUseContent,
  ToolUseContentFromJSON,
  ToolUseContentFromJSONTyped,
  ToolUseContentToJSON
} from './ToolUseContent';

/**
 * @type MessageResponseContentInner
 * @export
 */
export type MessageResponseContentInner =
  | ({ type: 'file' } & FileContent)
  | ({ type: 'image' } & ImageContent)
  | ({ type: 'text' } & TextContent)
  | ({ type: 'text_delta' } & TextDeltaContent)
  | ({ type: 'tool_result' } & ToolResultContent)
  | ({ type: 'tool_use' } & ToolUseContent);

export function MessageResponseContentInnerFromJSON(
  json: any
): MessageResponseContentInner {
  return MessageResponseContentInnerFromJSONTyped(json, false);
}

export function MessageResponseContentInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MessageResponseContentInner {
  if (json == null) {
    return json;
  }
  switch (json['type']) {
    case 'file':
      return Object.assign({}, FileContentFromJSONTyped(json, true), {
        type: 'file'
      } as const);
    case 'image':
      return Object.assign({}, ImageContentFromJSONTyped(json, true), {
        type: 'image'
      } as const);
    case 'text':
      return Object.assign({}, TextContentFromJSONTyped(json, true), {
        type: 'text'
      } as const);
    case 'text_delta':
      return Object.assign({}, TextDeltaContentFromJSONTyped(json, true), {
        type: 'text_delta'
      } as const);
    case 'tool_result':
      return Object.assign({}, ToolResultContentFromJSONTyped(json, true), {
        type: 'tool_result'
      } as const);
    case 'tool_use':
      return Object.assign({}, ToolUseContentFromJSONTyped(json, true), {
        type: 'tool_use'
      } as const);
    default:
      throw new Error(
        `No variant of MessageResponseContentInner exists with 'type=${json['type']}'`
      );
  }
}

export function MessageResponseContentInnerToJSON(json: any): any {
  return MessageResponseContentInnerToJSONTyped(json, false);
}

export function MessageResponseContentInnerToJSONTyped(
  value?: MessageResponseContentInner | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }
  switch (value['type']) {
    case 'file':
      return Object.assign({}, FileContentToJSON(value), {
        type: 'file'
      } as const);
    case 'image':
      return Object.assign({}, ImageContentToJSON(value), {
        type: 'image'
      } as const);
    case 'text':
      return Object.assign({}, TextContentToJSON(value), {
        type: 'text'
      } as const);
    case 'text_delta':
      return Object.assign({}, TextDeltaContentToJSON(value), {
        type: 'text_delta'
      } as const);
    case 'tool_result':
      return Object.assign({}, ToolResultContentToJSON(value), {
        type: 'tool_result'
      } as const);
    case 'tool_use':
      return Object.assign({}, ToolUseContentToJSON(value), {
        type: 'tool_use'
      } as const);
    default:
      throw new Error(
        `No variant of MessageResponseContentInner exists with 'type=${value['type']}'`
      );
  }
}

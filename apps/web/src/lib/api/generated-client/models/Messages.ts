/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { Threads } from './Threads';
import {
    ThreadsFromJSON,
    ThreadsFromJSONTyped,
    ThreadsToJSON,
    ThreadsToJSONTyped,
} from './Threads';
import type { MessageContents } from './MessageContents';
import {
    MessageContentsFromJSON,
    MessageContentsFromJSONTyped,
    MessageContentsToJSON,
    MessageContentsToJSONTyped,
} from './MessageContents';

/**
 * Represents a Messages record
 * @export
 * @interface Messages
 */
export interface Messages {
    /**
     * 
     * @type {string}
     * @memberof Messages
     */
    id: string;
    /**
     * 
     * @type {Threads}
     * @memberof Messages
     */
    thread?: Threads | null;
    /**
     * 
     * @type {string}
     * @memberof Messages
     */
    thread_id: string;
    /**
     * 
     * @type {string}
     * @memberof Messages
     */
    role: string;
    /**
     * 
     * @type {Array<MessageContents>}
     * @memberof Messages
     */
    contents?: Array<MessageContents> | null;
    /**
     * 
     * @type {string}
     * @memberof Messages
     */
    agent_class: string;
    /**
     * 
     * @type {Date}
     * @memberof Messages
     */
    created_at: Date;
    /**
     * 
     * @type {Date}
     * @memberof Messages
     */
    updated_at: Date;
}

/**
 * Check if a given object implements the Messages interface.
 */
export function instanceOfMessages(value: object): value is Messages {
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('thread_id' in value) || value['thread_id'] === undefined) return false;
    if (!('role' in value) || value['role'] === undefined) return false;
    if (!('agent_class' in value) || value['agent_class'] === undefined) return false;
    if (!('created_at' in value) || value['created_at'] === undefined) return false;
    if (!('updated_at' in value) || value['updated_at'] === undefined) return false;
    return true;
}

export function MessagesFromJSON(json: any): Messages {
    return MessagesFromJSONTyped(json, false);
}

export function MessagesFromJSONTyped(json: any, ignoreDiscriminator: boolean): Messages {
    if (json == null) {
        return json;
    }
    return {
        
        'id': json['id'],
        'thread': json['thread'] == null ? undefined : ThreadsFromJSON(json['thread']),
        'thread_id': json['thread_id'],
        'role': json['role'],
        'contents': json['contents'] == null ? undefined : ((json['contents'] as Array<any>).map(MessageContentsFromJSON)),
        'agent_class': json['agent_class'],
        'created_at': (new Date(json['created_at'])),
        'updated_at': (new Date(json['updated_at'])),
    };
}

export function MessagesToJSON(json: any): Messages {
    return MessagesToJSONTyped(json, false);
}

export function MessagesToJSONTyped(value?: Messages | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'id': value['id'],
        'thread': ThreadsToJSON(value['thread']),
        'thread_id': value['thread_id'],
        'role': value['role'],
        'contents': value['contents'] == null ? undefined : ((value['contents'] as Array<any>).map(MessageContentsToJSON)),
        'agent_class': value['agent_class'],
        'created_at': ((value['created_at']).toISOString()),
        'updated_at': ((value['updated_at']).toISOString()),
    };
}


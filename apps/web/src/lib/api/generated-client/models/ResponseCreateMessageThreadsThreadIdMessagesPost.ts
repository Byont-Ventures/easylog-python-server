/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
import type { TextDeltaContent } from './TextDeltaContent';
import {
    TextDeltaContentFromJSON,
    TextDeltaContentFromJSONTyped,
    TextDeltaContentToJSON,
    TextDeltaContentToJSONTyped,
} from './TextDeltaContent';
import type { ImageContent } from './ImageContent';
import {
    ImageContentFromJSON,
    ImageContentFromJSONTyped,
    ImageContentToJSON,
    ImageContentToJSONTyped,
} from './ImageContent';
import type { PDFContent } from './PDFContent';
import {
    PDFContentFromJSON,
    PDFContentFromJSONTyped,
    PDFContentToJSON,
    PDFContentToJSONTyped,
} from './PDFContent';
import type { ToolUseContent } from './ToolUseContent';
import {
    ToolUseContentFromJSON,
    ToolUseContentFromJSONTyped,
    ToolUseContentToJSON,
    ToolUseContentToJSONTyped,
} from './ToolUseContent';
import type { ToolResultContent } from './ToolResultContent';
import {
    ToolResultContentFromJSON,
    ToolResultContentFromJSONTyped,
    ToolResultContentToJSON,
    ToolResultContentToJSONTyped,
} from './ToolResultContent';
import type { TextContent } from './TextContent';
import {
    TextContentFromJSON,
    TextContentFromJSONTyped,
    TextContentToJSON,
    TextContentToJSONTyped,
} from './TextContent';
import type { ToolResultDeltaContent } from './ToolResultDeltaContent';
import {
    ToolResultDeltaContentFromJSON,
    ToolResultDeltaContentFromJSONTyped,
    ToolResultDeltaContentToJSON,
    ToolResultDeltaContentToJSONTyped,
} from './ToolResultDeltaContent';

/**
 * 
 * @export
 * @interface ResponseCreateMessageThreadsThreadIdMessagesPost
 */
export interface ResponseCreateMessageThreadsThreadIdMessagesPost {
    /**
     * 
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    type?: ResponseCreateMessageThreadsThreadIdMessagesPostTypeEnum;
    /**
     * The base64 encoded PDF data, without any prefixes like `data:application/pdf;base64,`, for example: `iVBORw0KGgoAAAANSUhEUgAAAAEAAAABCAYAAAAfFcSJAAAADUlEQVR42mP8/5+hHgAHggJ/PchI7wAAAABJRU5ErkJggg==`
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    content: string;
    /**
     * The ID of the tool use.
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    id: string;
    /**
     * The name of the tool.
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    name: string;
    /**
     * The arguments of the tool.
     * @type {object}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    input: object;
    /**
     * The ID of the tool use.
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    tool_use_id: string;
    /**
     * The format of the content.
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    content_format?: ResponseCreateMessageThreadsThreadIdMessagesPostContentFormatEnum;
    /**
     * Whether the tool result is an error.
     * @type {boolean}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    is_error?: boolean;
    /**
     * The content type of the image, must start with `image/`
     * @type {string}
     * @memberof ResponseCreateMessageThreadsThreadIdMessagesPost
     */
    content_type?: ResponseCreateMessageThreadsThreadIdMessagesPostContentTypeEnum;
}


/**
 * @export
 */
export const ResponseCreateMessageThreadsThreadIdMessagesPostTypeEnum = {
    Text: 'text',
    TextDelta: 'text_delta',
    ToolUse: 'tool_use',
    ToolResult: 'tool_result',
    ToolResultDelta: 'tool_result_delta',
    Image: 'image',
    Pdf: 'pdf'
} as const;
export type ResponseCreateMessageThreadsThreadIdMessagesPostTypeEnum = typeof ResponseCreateMessageThreadsThreadIdMessagesPostTypeEnum[keyof typeof ResponseCreateMessageThreadsThreadIdMessagesPostTypeEnum];

/**
 * @export
 */
export const ResponseCreateMessageThreadsThreadIdMessagesPostContentFormatEnum = {
    Image: 'image',
    Unknown: 'unknown'
} as const;
export type ResponseCreateMessageThreadsThreadIdMessagesPostContentFormatEnum = typeof ResponseCreateMessageThreadsThreadIdMessagesPostContentFormatEnum[keyof typeof ResponseCreateMessageThreadsThreadIdMessagesPostContentFormatEnum];

/**
 * @export
 */
export const ResponseCreateMessageThreadsThreadIdMessagesPostContentTypeEnum = {
    ImageJpeg: 'image/jpeg',
    ImagePng: 'image/png',
    ImageGif: 'image/gif',
    ImageWebp: 'image/webp'
} as const;
export type ResponseCreateMessageThreadsThreadIdMessagesPostContentTypeEnum = typeof ResponseCreateMessageThreadsThreadIdMessagesPostContentTypeEnum[keyof typeof ResponseCreateMessageThreadsThreadIdMessagesPostContentTypeEnum];


/**
 * Check if a given object implements the ResponseCreateMessageThreadsThreadIdMessagesPost interface.
 */
export function instanceOfResponseCreateMessageThreadsThreadIdMessagesPost(value: object): value is ResponseCreateMessageThreadsThreadIdMessagesPost {
    if (!('content' in value) || value['content'] === undefined) return false;
    if (!('id' in value) || value['id'] === undefined) return false;
    if (!('name' in value) || value['name'] === undefined) return false;
    if (!('input' in value) || value['input'] === undefined) return false;
    if (!('tool_use_id' in value) || value['tool_use_id'] === undefined) return false;
    return true;
}

export function ResponseCreateMessageThreadsThreadIdMessagesPostFromJSON(json: any): ResponseCreateMessageThreadsThreadIdMessagesPost {
    return ResponseCreateMessageThreadsThreadIdMessagesPostFromJSONTyped(json, false);
}

export function ResponseCreateMessageThreadsThreadIdMessagesPostFromJSONTyped(json: any, ignoreDiscriminator: boolean): ResponseCreateMessageThreadsThreadIdMessagesPost {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'content': json['content'],
        'id': json['id'],
        'name': json['name'],
        'input': json['input'],
        'tool_use_id': json['tool_use_id'],
        'content_format': json['content_format'] == null ? undefined : json['content_format'],
        'is_error': json['is_error'] == null ? undefined : json['is_error'],
        'content_type': json['content_type'] == null ? undefined : json['content_type'],
    };
}

export function ResponseCreateMessageThreadsThreadIdMessagesPostToJSON(json: any): ResponseCreateMessageThreadsThreadIdMessagesPost {
    return ResponseCreateMessageThreadsThreadIdMessagesPostToJSONTyped(json, false);
}

export function ResponseCreateMessageThreadsThreadIdMessagesPostToJSONTyped(value?: ResponseCreateMessageThreadsThreadIdMessagesPost | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'content': value['content'],
        'id': value['id'],
        'name': value['name'],
        'input': value['input'],
        'tool_use_id': value['tool_use_id'],
        'content_format': value['content_format'],
        'is_error': value['is_error'],
        'content_type': value['content_type'],
    };
}


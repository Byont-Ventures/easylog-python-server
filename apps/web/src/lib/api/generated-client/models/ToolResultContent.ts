/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @export
 * @interface ToolResultContent
 */
export interface ToolResultContent {
  /**
   * @memberof ToolResultContent
   * @type {string}
   */
  type?: ToolResultContentTypeEnum;
  /**
   * The ID of the tool use.
   *
   * @memberof ToolResultContent
   * @type {string}
   */
  tool_use_id: string;
  /**
   * The result of the tool.
   *
   * @memberof ToolResultContent
   * @type {string}
   */
  content: string;
  /**
   * The format of the content.
   *
   * @memberof ToolResultContent
   * @type {string}
   */
  content_format?: ToolResultContentContentFormatEnum;
  /**
   * Whether the tool result is an error.
   *
   * @memberof ToolResultContent
   * @type {boolean}
   */
  is_error?: boolean;
}

/** @export */
export const ToolResultContentTypeEnum = {
  ToolResult: 'tool_result'
} as const;
export type ToolResultContentTypeEnum =
  (typeof ToolResultContentTypeEnum)[keyof typeof ToolResultContentTypeEnum];

/** @export */
export const ToolResultContentContentFormatEnum = {
  Image: 'image',
  Chart: 'chart',
  Unknown: 'unknown'
} as const;
export type ToolResultContentContentFormatEnum =
  (typeof ToolResultContentContentFormatEnum)[keyof typeof ToolResultContentContentFormatEnum];

/** Check if a given object implements the ToolResultContent interface. */
export function instanceOfToolResultContent(
  value: object
): value is ToolResultContent {
  if (!('tool_use_id' in value) || value['tool_use_id'] === undefined)
    return false;
  if (!('content' in value) || value['content'] === undefined) return false;
  return true;
}

export function ToolResultContentFromJSON(json: any): ToolResultContent {
  return ToolResultContentFromJSONTyped(json, false);
}

export function ToolResultContentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ToolResultContent {
  if (json == null) {
    return json;
  }
  return {
    type: json['type'] == null ? undefined : json['type'],
    tool_use_id: json['tool_use_id'],
    content: json['content'],
    content_format:
      json['content_format'] == null ? undefined : json['content_format'],
    is_error: json['is_error'] == null ? undefined : json['is_error']
  };
}

export function ToolResultContentToJSON(json: any): ToolResultContent {
  return ToolResultContentToJSONTyped(json, false);
}

export function ToolResultContentToJSONTyped(
  value?: ToolResultContent | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    type: value['type'],
    tool_use_id: value['tool_use_id'],
    content: value['content'],
    content_format: value['content_format'],
    is_error: value['is_error']
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface ToolResultContent
 */
export interface ToolResultContent {
    /**
     * 
     * @type {string}
     * @memberof ToolResultContent
     */
    type?: ToolResultContentTypeEnum;
    /**
     * The ID of the tool use.
     * @type {string}
     * @memberof ToolResultContent
     */
    tool_use_id: string;
    /**
     * The result of the tool.
     * @type {string}
     * @memberof ToolResultContent
     */
    content: string;
    /**
     * Whether the tool result is an error.
     * @type {boolean}
     * @memberof ToolResultContent
     */
    is_error?: boolean;
}


/**
 * @export
 */
export const ToolResultContentTypeEnum = {
    ToolResult: 'tool_result'
} as const;
export type ToolResultContentTypeEnum = typeof ToolResultContentTypeEnum[keyof typeof ToolResultContentTypeEnum];


/**
 * Check if a given object implements the ToolResultContent interface.
 */
export function instanceOfToolResultContent(value: object): value is ToolResultContent {
    if (!('tool_use_id' in value) || value['tool_use_id'] === undefined) return false;
    if (!('content' in value) || value['content'] === undefined) return false;
    return true;
}

export function ToolResultContentFromJSON(json: any): ToolResultContent {
    return ToolResultContentFromJSONTyped(json, false);
}

export function ToolResultContentFromJSONTyped(json: any, ignoreDiscriminator: boolean): ToolResultContent {
    if (json == null) {
        return json;
    }
    return {
        
        'type': json['type'] == null ? undefined : json['type'],
        'tool_use_id': json['tool_use_id'],
        'content': json['content'],
        'is_error': json['is_error'] == null ? undefined : json['is_error'],
    };
}

export function ToolResultContentToJSON(json: any): ToolResultContent {
    return ToolResultContentToJSONTyped(json, false);
}

export function ToolResultContentToJSONTyped(value?: ToolResultContent | null, ignoreDiscriminator: boolean = false): any {
    if (value == null) {
        return value;
    }

    return {
        
        'type': value['type'],
        'tool_use_id': value['tool_use_id'],
        'content': value['content'],
        'is_error': value['is_error'],
    };
}


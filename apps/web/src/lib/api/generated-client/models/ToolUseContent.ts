/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @export
 * @interface ToolUseContent
 */
export interface ToolUseContent {
  /**
   * The ID of the content.
   *
   * @memberof ToolUseContent
   * @type {string}
   */
  id: string;
  /**
   * @memberof ToolUseContent
   * @type {string}
   */
  type?: ToolUseContentTypeEnum;
  /**
   * The ID of the tool use.
   *
   * @memberof ToolUseContent
   * @type {string}
   */
  tool_use_id: string;
  /**
   * The name of the tool.
   *
   * @memberof ToolUseContent
   * @type {string}
   */
  name: string;
  /**
   * The arguments of the tool.
   *
   * @memberof ToolUseContent
   * @type {object}
   */
  input: object;
}

/** @export */
export const ToolUseContentTypeEnum = {
  ToolUse: 'tool_use'
} as const;
export type ToolUseContentTypeEnum =
  (typeof ToolUseContentTypeEnum)[keyof typeof ToolUseContentTypeEnum];

/** Check if a given object implements the ToolUseContent interface. */
export function instanceOfToolUseContent(
  value: object
): value is ToolUseContent {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('tool_use_id' in value) || value['tool_use_id'] === undefined)
    return false;
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('input' in value) || value['input'] === undefined) return false;
  return true;
}

export function ToolUseContentFromJSON(json: any): ToolUseContent {
  return ToolUseContentFromJSONTyped(json, false);
}

export function ToolUseContentFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ToolUseContent {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    type: json['type'] == null ? undefined : json['type'],
    tool_use_id: json['tool_use_id'],
    name: json['name'],
    input: json['input']
  };
}

export function ToolUseContentToJSON(json: any): ToolUseContent {
  return ToolUseContentToJSONTyped(json, false);
}

export function ToolUseContentToJSONTyped(
  value?: ToolUseContent | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    type: value['type'],
    tool_use_id: value['tool_use_id'],
    name: value['name'],
    input: value['input']
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { FileContent } from './file-content';
import {
  FileContentFromJSON,
  FileContentFromJSONTyped,
  FileContentToJSON,
  FileContentToJSONTyped
} from './file-content';
import type { TextDeltaContent } from './text-delta-content';
import {
  TextDeltaContentFromJSON,
  TextDeltaContentFromJSONTyped,
  TextDeltaContentToJSON,
  TextDeltaContentToJSONTyped
} from './text-delta-content';
import type { ImageContent } from './image-content';
import {
  ImageContentFromJSON,
  ImageContentFromJSONTyped,
  ImageContentToJSON,
  ImageContentToJSONTyped
} from './image-content';
import type { ToolUseContent } from './tool-use-content';
import {
  ToolUseContentFromJSON,
  ToolUseContentFromJSONTyped,
  ToolUseContentToJSON,
  ToolUseContentToJSONTyped
} from './tool-use-content';
import type { ToolResultContent } from './tool-result-content';
import {
  ToolResultContentFromJSON,
  ToolResultContentFromJSONTyped,
  ToolResultContentToJSON,
  ToolResultContentToJSONTyped
} from './tool-result-content';
import type { TextContent } from './text-content';
import {
  TextContentFromJSON,
  TextContentFromJSONTyped,
  TextContentToJSON,
  TextContentToJSONTyped
} from './text-content';

/**
 * @export
 * @interface MessageContentInner
 */
export interface MessageContentInner {
  /**
   * The ID of the content.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  id: string;
  /**
   * @memberof MessageContentInner
   * @type {string}
   */
  type?: MessageContentInnerTypeEnum;
  /**
   * The content of the message.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  text: string;
  /**
   * The ID of the tool use.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  tool_use_id: string;
  /**
   * The name of the tool.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  name: string;
  /**
   * The arguments of the tool.
   *
   * @memberof MessageContentInner
   * @type {object}
   */
  input: object;
  /**
   * @memberof MessageContentInner
   * @type {string}
   */
  widget_type?: MessageContentInnerWidgetTypeEnum;
  /**
   * The result of the tool.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  output: string;
  /**
   * Whether the tool result is an error.
   *
   * @memberof MessageContentInner
   * @type {boolean}
   */
  is_error?: boolean;
  /**
   * The URL of the image.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  image_url: string;
  /**
   * The file data of the message.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  file_data: string;
  /**
   * The name of the file.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  file_name: string;
  /**
   * The delta of the content.
   *
   * @memberof MessageContentInner
   * @type {string}
   */
  delta: string;
}

/** @export */
export const MessageContentInnerTypeEnum = {
  Text: 'text',
  ToolUse: 'tool_use',
  ToolResult: 'tool_result',
  Image: 'image',
  File: 'file',
  TextDelta: 'text_delta'
} as const;
export type MessageContentInnerTypeEnum =
  (typeof MessageContentInnerTypeEnum)[keyof typeof MessageContentInnerTypeEnum];

/** @export */
export const MessageContentInnerWidgetTypeEnum = {
  Image: 'image',
  Chart: 'chart'
} as const;
export type MessageContentInnerWidgetTypeEnum =
  (typeof MessageContentInnerWidgetTypeEnum)[keyof typeof MessageContentInnerWidgetTypeEnum];

/** Check if a given object implements the MessageContentInner interface. */
export function instanceOfMessageContentInner(
  value: object
): value is MessageContentInner {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('text' in value) || value['text'] === undefined) return false;
  if (!('tool_use_id' in value) || value['tool_use_id'] === undefined)
    return false;
  if (!('name' in value) || value['name'] === undefined) return false;
  if (!('input' in value) || value['input'] === undefined) return false;
  if (!('output' in value) || value['output'] === undefined) return false;
  if (!('image_url' in value) || value['image_url'] === undefined) return false;
  if (!('file_data' in value) || value['file_data'] === undefined) return false;
  if (!('file_name' in value) || value['file_name'] === undefined) return false;
  if (!('delta' in value) || value['delta'] === undefined) return false;
  return true;
}

export function MessageContentInnerFromJSON(json: any): MessageContentInner {
  return MessageContentInnerFromJSONTyped(json, false);
}

export function MessageContentInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): MessageContentInner {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    type: json['type'] == null ? undefined : json['type'],
    text: json['text'],
    tool_use_id: json['tool_use_id'],
    name: json['name'],
    input: json['input'],
    widget_type: json['widget_type'] == null ? undefined : json['widget_type'],
    output: json['output'],
    is_error: json['is_error'] == null ? undefined : json['is_error'],
    image_url: json['image_url'],
    file_data: json['file_data'],
    file_name: json['file_name'],
    delta: json['delta']
  };
}

export function MessageContentInnerToJSON(json: any): MessageContentInner {
  return MessageContentInnerToJSONTyped(json, false);
}

export function MessageContentInnerToJSONTyped(
  value?: MessageContentInner | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    type: value['type'],
    text: value['text'],
    tool_use_id: value['tool_use_id'],
    name: value['name'],
    input: value['input'],
    widget_type: value['widget_type'],
    output: value['output'],
    is_error: value['is_error'],
    image_url: value['image_url'],
    file_data: value['file_data'],
    file_name: value['file_name'],
    delta: value['delta']
  };
}

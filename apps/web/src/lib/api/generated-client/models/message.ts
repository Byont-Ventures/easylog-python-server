/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { MessageContentInner } from './message-content-inner';
import {
  MessageContentInnerFromJSON,
  MessageContentInnerFromJSONTyped,
  MessageContentInnerToJSON,
  MessageContentInnerToJSONTyped
} from './message-content-inner';

/**
 * @export
 * @interface Message
 */
export interface Message {
  /**
   * @memberof Message
   * @type {string}
   */
  id: string;
  /**
   * @memberof Message
   * @type {string}
   */
  role: MessageRoleEnum;
  /**
   * @memberof Message
   * @type {string}
   */
  name?: string | null;
  /**
   * @memberof Message
   * @type {string}
   */
  tool_use_id?: string | null;
  /**
   * @memberof Message
   * @type {MessageContentInner[]}
   */
  content: Array<MessageContentInner>;
}

/** @export */
export const MessageRoleEnum = {
  Assistant: 'assistant',
  User: 'user',
  System: 'system',
  Developer: 'developer',
  Tool: 'tool'
} as const;
export type MessageRoleEnum =
  (typeof MessageRoleEnum)[keyof typeof MessageRoleEnum];

/** Check if a given object implements the Message interface. */
export function instanceOfMessage(value: object): value is Message {
  if (!('id' in value) || value['id'] === undefined) return false;
  if (!('role' in value) || value['role'] === undefined) return false;
  if (!('content' in value) || value['content'] === undefined) return false;
  return true;
}

export function MessageFromJSON(json: any): Message {
  return MessageFromJSONTyped(json, false);
}

export function MessageFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Message {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'],
    role: json['role'],
    name: json['name'] == null ? undefined : json['name'],
    tool_use_id: json['tool_use_id'] == null ? undefined : json['tool_use_id'],
    content: (json['content'] as Array<any>).map(MessageContentInnerFromJSON)
  };
}

export function MessageToJSON(json: any): Message {
  return MessageToJSONTyped(json, false);
}

export function MessageToJSONTyped(
  value?: Message | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    role: value['role'],
    name: value['name'],
    tool_use_id: value['tool_use_id'],
    content: (value['content'] as Array<any>).map(MessageContentInnerToJSON)
  };
}

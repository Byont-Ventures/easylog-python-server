openapi: 3.0.3
info:
  title: Easylog
  version: 0.2.0
servers:
  - url: https://yellowb.easylog.nu/api/
  - url: http://easylog-web.test/api/
  - url: https://staging2.easylog.nu/api/
  - url: http://localhost:8000/api/
# externalDocs:
#   description: Easylog API-V2 Documentation
#   url: https://swagger.io
security:
  - bearer: []
tags:
  - name: Datasources
    description: 'General datasource endpoints'
  - name: Planning
    description: 'Planning related endpoints'
  - name: Planning phases
    description: 'Phases related endpoints'
  - name: Planning Resources
    description: 'Planning resources related endpoints'
  - name: Allocations
    description: 'Allocate resources to a project'
  - name: Authentication
    description: 'OAuth2 and authentication endpoints'
  - name: Announcements
    description: 'Announcement related endpoints'
  - name: 'Chats - Alpha'
    description: 'Chat related endpoints'
paths:
  /auth-configurations:
    get:
      tags: [Authentication]
      summary: Get available authentication configurations for this instance
      description: All openidconnect configurations that are enabled on this instance, all authorization code with pkce flow.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/authConfiguration'
  /v2/datasources:
    get:
      tags: [Datasources]
      summary: Get all datasources by client.
      parameters:
        - in: query
          name: types
          description: Filter datasources to have one or more of the specified types (OR filter)
          schema:
            type: array
            items:
              type: string
      description: The fields array is only available on the /datasources/{id|slug} endpoint.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          $ref: '#/components/schemas/datasource'
                  - $ref: '#/components/schemas/pagination'

  /v2/datasources/{datasourceId}:
    get:
      tags: [Datasources]
      summary: Get a datasource by id or by slug.
      description: The fields array is only available on the /datasources/{id|slug} endpoint.
      parameters:
        - in: path
          name: datasourceId
          schema:
            type: string
          required: true
          description: The datasource id or slug.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasource'
  /v2/datasources/{datasourceId}/project:
    post:
      tags: [Planning]
      summary: Store single project
      parameters:
        - in: path
          name: datasourceId
          schema:
            type: string
          required: true
          description: The datasource id or slug.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '403':
          $ref: '#/components/responses/unauthorized'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/datasourceProject'
                      - $ref: '#/components/schemas/timestamps'

  /v2/datasources/{datasourceId}/entries/{entryId}:
    get:
      tags: [Datasources]
      summary: Get a datasource entry by id.
      parameters:
        - in: path
          name: datasourceId
          schema:
            type: string
          required: true
          description: The datasource id or slug.
        - in: path
          name: entryId
          schema:
            type: integer
          required: true
          description: The ID of the entity datum.
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceEntry'

  /v2/datasources/projects:
    get:
      tags: [Planning]
      summary: Get a list of all projects
      parameters:
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: 2020-01-01
          description: 'Start and end date must be present in the request, if both are null then all projects will be returned. Start date must be before end date, end date must be after start date.'
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: 2020-01-31
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/datasourceProject'
                            - $ref: '#/components/schemas/timestamps'
                  - $ref: '#/components/schemas/pagination'
    post:
      deprecated: true
      tags: [Planning]
      summary: Store project
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '403':
          $ref: '#/components/responses/unauthorized'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/datasourceProject'
                      - $ref: '#/components/schemas/timestamps'

  /v2/datasources/projects/{projectId}:
    get:
      tags: [Planning]
      summary: Get the details of a project
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project
        - in: query
          name: start_date
          schema:
            type: string
            format: date
            example: 2020-01-01
            description: 'Start and end date must be present in the request, if both are null then all projects will be returned. Start date must be before end date, end date must be after start date.'
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: 2020-01-31
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/datasourceProject'
                      - type: object
                        properties:
                          allocations_grouped:
                            type: array
                            items:
                              $ref: '#/components/schemas/allocationsGrouped'
                      - $ref: '#/components/schemas/timestamps'
    put:
      tags: [Planning]
      summary: Update project
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project
      requestBody:
        required: true
        description: "- When updating `start` or `end`, both need to be specified.\n\n- Keys not provided in the body are not updated.\n\n- Keys that are `null` will be set to null if validation permits it."
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/projectBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '403':
          $ref: '#/components/responses/unauthorized'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/datasourceProject'
                      - $ref: '#/components/schemas/timestamps'
    delete:
      tags: [Planning]
      summary: Delete a project
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project
      responses:
        '204':
          $ref: '#/components/responses/noContentDeleted'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorDelete'

  /v2/datasources/resources:
    get:
      tags: [Planning Resources]
      summary: Get a list of all resources
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/resourceResource'
                            - $ref: '#/components/schemas/timestamps'
                  - $ref: '#/components/schemas/pagination'

  /v2/datasources/resources/{resourceId}/projects/{datasourceSlug}:
    get:
      tags: [Planning Resources]
      summary: Get a list if all projects of every resource
      parameters:
        - in: path
          name: resourceId
          schema:
            type: integer
          required: true
          description: ID of the resource
        - in: path
          name: datasourceSlug
          schema:
            type: string
            example: buschauffeurs
          required: true
          description: The datasource slug. If null, then all datasources will be returned.
        - in: query
          name: start_date
          schema:
            type: string
            format: date
          example: 2020-01-01
          description: 'Start and end date must be present in the request, if both are null then all projects will be returned. Start date must be before end date, end date must be after start date.'
        - in: query
          name: end_date
          schema:
            type: string
            format: date
            example: 2020-01-31

      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      allOf:
                        - $ref: '#/components/schemas/resourceResource'
                        - $ref: '#/components/schemas/entityDatumProjectResource'
                        - $ref: '#/components/schemas/allocation_types'
                        - $ref: '#/components/schemas/timestamps'

  /v2/datasources/resources/{resourceId}:
    get:
      tags: [Planning Resources]
      summary: Get a list of resource groups for a resource
      parameters:
        - in: path
          name: resourceId
          schema:
            type: integer
          required: true
          description: ID of the resource
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/resourceResource'
                            - $ref: '#/components/schemas/timestamps'
                  - $ref: '#/components/schemas/pagination'

  /v2/datasources/resources/{resourceId}/{resourceSlug}:
    get:
      tags: [Planning Resources]
      summary: Get a specific resource group for a resource
      parameters:
        - in: path
          name: resourceId
          schema:
            type: integer
          required: true
          description: ID of the resource
        - in: path
          name: resourceSlug
          schema:
            type: string
          required: true
          description: slug of the resource group
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/resourceResource'
                      - type: object
                        properties:
                          data:
                            type: array
                            items:
                              $ref: '#/components/schemas/resourceDataEntry'
                      - $ref: '#/components/schemas/timestamps'

  /v2/datasources/allocations:
    post:
      tags: [Allocations]
      summary: Store allocation
      deprecated: true
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasourceAllocationBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceAllocation'

  /v2/datasources/allocations/multiple:
    get:
      tags: [Allocations]
      summary: Retrieve allocations
      parameters:
        - in: query
          name: ids
          schema:
            type: string
            example: '100,101,102'
          required: true
          description: Comma separated list of IDs to retrieve
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorUpdate'
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/datasourceAllocation'
    post:
      tags: [Allocations]
      summary: Store multiple allocations
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasourceAllocationMultipleBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceAllocationMultiple'
    put:
      tags: [Allocations]
      summary: Update multiple allocations
      requestBody:
        required: true
        description: "`ID`, `start` and `end` are required.\n\nIf other fields (eg. `type`, `comment` or `fields.*`) are left out of the request body, they are not updated.\n\nWarning: setting them as `null` will result in an update to `null`.\n\nNote: if one allocation update fails, ALL updates will be rolled back"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/datasourceAllocationMultipleUpdateBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceAllocationMultiple'

  /v2/datasources/allocations/{allocationId}:
    get:
      tags: [Allocations]
      summary: Retrieve allocation
      parameters:
        - in: path
          name: allocationId
          schema:
            type: integer
          required: true
          description: ID of the allocation
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorUpdate'
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceAllocation'

    put:
      tags: [Allocations]
      summary: Update allocation
      deprecated: true
      parameters:
        - in: path
          name: allocationId
          schema:
            type: integer
          required: true
          description: ID of the allocation
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorUpdate'
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/datasourceAllocation'
    delete:
      tags: [Allocations]
      summary: Delete an allocation
      parameters:
        - in: path
          name: allocationId
          schema:
            type: integer
          required: true
          description: ID of the allocation
      responses:
        '204':
          $ref: '#/components/responses/noContentDeleted'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorDelete'

  /v2/datasources/client/{clientId}/configuration:
    get:
      summary: Get configuration
      deprecated: true
      parameters:
        - in: path
          name: clientId
          schema:
            type: string
          required: true
          description: The client id.
      description: Get the configuration for the frontend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  configuration:
                    type: object
                    example: 'See client-configuration.json'

  /v2/configuration:
    get:
      summary: Get configuration
      description: Get the configuration for the frontend
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  configuration:
                    type: object
                    example: 'See client-configuration.json'
                  can:
                    type: object
                    properties:
                      edit_planning:
                        type: boolean
                  defaultTimePeriod:
                    type: object
                    properties:
                      start:
                        type: string
                        format: date-time
                      end:
                        type: string
                        format: date-time
                      interval:
                        type: string
                        format: date-time
                  filters:
                    type: object
                    properties:
                      name:
                        type: string
                        example: 'land'
                      label:
                        type: string
                        example: 'Land'
                      multiple:
                        type: boolean
                        example: false
                      options:
                        type: array
                        items:
                          type: string
                          example: 'Nederland'

  /v2/announcements:
    get:
      tags: [Announcements]
      summary: Get announcements
      description: Retrieve all announcements for the authenticated user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/announcementResource'

  /v2/announcement/{announcementId}:
    get:
      tags: [Announcements]
      summary: Get announcement
      description: Retrieve a single announcement based on the id
      parameters:
        - in: path
          name: announcementId
          schema:
            type: integer
          required: true
          description: ID of the announcement
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    $ref: '#/components/schemas/announcementResource'

  /v2/announcement/{announcementId}/status:
    post:
      tags: [Announcements]
      summary: Update announcement statuses
      parameters:
        - in: path
          name: announcementId
          schema:
            type: integer
          required: true
          description: ID of the announcement
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/announcementStatusBody'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/announcementResource'

  /v2/chats:
    get:
      tags: ['Chats - Alpha']
      summary: Get all chats of the authenticated user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/chatResource'

  /v2/chat/{chatId}/messages:
    get:
      tags: ['Chats - Alpha']
      summary: Get all messages of a chat
      parameters:
        - in: path
          name: chatId
          schema:
            type: integer
          required: true
          description: ID of the chat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/chatMessageResource'
    post:
      tags: ['Chats - Alpha']
      summary: Store a new message
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/messageResourceBody'
      parameters:
        - in: path
          name: chatId
          schema:
            type: integer
          required: true
          description: ID of the chat
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/chatMessageResource'

  /v2/datasources/phases/{phaseId}:
    get:
      tags: [Planning phases]
      summary: Get phase details
      parameters:
        - in: path
          name: phaseId
          schema:
            type: integer
          required: true
          description: ID of the phase
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/phase'
                      - $ref: '#/components/schemas/timestamps'
    put:
      tags: [Planning phases]
      summary: Update phase
      parameters:
        - in: path
          name: phaseId
          schema:
            type: integer
          required: true
          description: ID of the phase
      requestBody:
        required: true
        description: '- `start` and `end` both need to be specified'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phaseUpdateBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '403':
          $ref: '#/components/responses/unauthorized'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/phase'
                      - $ref: '#/components/schemas/timestamps'
    delete:
      tags: [Planning phases]
      summary: Delete a phase
      parameters:
        - in: path
          name: phaseId
          schema:
            type: integer
          required: true
          description: ID of the phase
      responses:
        '204':
          $ref: '#/components/responses/noContentDeleted'
        '403':
          $ref: '#/components/responses/unauthorized'
        '500':
          $ref: '#/components/responses/serverErrorDelete'

  /v2/datasources/project/{projectId}/phases:
    get:
      tags: [Planning phases]
      summary: Get a list of all phases in this project
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                allOf:
                  - type: object
                    properties:
                      data:
                        type: array
                        items:
                          allOf:
                            - $ref: '#/components/schemas/phase'
                            - $ref: '#/components/schemas/timestamps'
                  - $ref: '#/components/schemas/pagination'
    post:
      tags: [Planning phases]
      summary: Create a new phase
      parameters:
        - in: path
          name: projectId
          schema:
            type: integer
          required: true
          description: ID of the project
      requestBody:
        required: true
        description: '- `slug` must already exist and be specified on the parent datasource'
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/phaseBody'
      responses:
        '422':
          $ref: '#/components/responses/unprocessable'
        '500':
          $ref: '#/components/responses/serverErrorStore'
        '403':
          $ref: '#/components/responses/unauthorized'
        '201':
          description: OK
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    allOf:
                      - $ref: '#/components/schemas/phase'
                      - $ref: '#/components/schemas/timestamps'

components:
  securitySchemes:
    bearer:
      type: http
      scheme: bearer

  schemas:
    pagination:
      type: object
      properties:
        links:
          type: object
          properties:
            first:
              type: string
              example: 'https:// url to first page'
            last:
              type: string
              example: 'https:// url to last page'
            prev:
              type: string
              example: 'https:// url to previous page'
            next:
              type: string
              example: 'https:// url to next page'
        meta:
          type: object
          properties:
            current_page:
              type: integer
              example: 1
            last_page:
              type: integer
              example: 1
            links:
              type: array
              items:
                type: object
                properties:
                  url:
                    type: string
                    example: null
                  label:
                    type: string
                    example: '&laquo; Vorige'
                  active:
                    type: boolean
                    example: false
            path:
              type: string
              example: 'https:// url to pagination root'
            per_page:
              type: integer
              example: 10
            from:
              type: integer
              example: 1
            to:
              type: integer
              example: 2
            total:
              type: integer
              example: 2

    datasources:
      type: array
      items:
        $ref: '#/components/schemas/datasource'
    authConfigurations:
      type: array
      items:
        $ref: '#/components/schemas/authConfiguration'
    datasourceEntries:
      type: array
      items:
        $ref: '#/components/schemas/datasourceEntry'

    timestamps:
      type: object
      properties:
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    phase:
      type: object
      properties:
        id:
          type: integer
        slug:
          type: string
          example: 'name-of-type'
        project_id:
          type: integer
        start:
          type: string
          format: date-time
          nullable: true
        end:
          type: string
          format: date-time
          nullable: true
        is_staged:
          type: boolean

    phaseBody:
      type: object
      required:
        - slug
        - start
        - end
      properties:
        slug:
          type: string
          example: 'name-of-type'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        is_staged:
          type: boolean

    phaseUpdateBody:
      type: object
      required:
        - start
        - end
      properties:
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        is_staged:
          type: boolean

    allocation_types:
      type: object
      properties:
        allocation_types:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: integer
                nullable: true
              name:
                type: string
                example: 'name of type'
              label:
                type: string
                example: 'Name of Type'
              slug:
                type: string
                example: 'name-of-type'
              start:
                type: string
                format: date-time
                nullable: true
              end:
                type: string
                format: date-time
                nullable: true

    datasource:
      type: object
      properties:
        id:
          type: integer
        category_id:
          type: integer
        name:
          type: string
          example: 'Projects'
        description:
          type: string
          example: 'This datasource contains projects'
        slug:
          type: string
          example: 'projects'
        resource_groups:
          type: array
          nullable: true
          items:
            type: object
            properties:
              name:
                type: string
                example: 'name of group'
              label:
                type: string
                example: 'Name of Group'
              slug:
                type: string
                example: 'name-of-group'
        extra_data_fields:
          type: array
          nullable: true
          items:
            type: object
            properties:
              name:
                type: string
                example: 'project_status'
              type:
                type: string
                example: 'select'
              label:
                type: string
                example: 'project_status'
              options:
                type: array
                items:
                  type: object
                  properties:
                    value:
                      type: string
                      example: 'preparation'
                    label:
                      type: string
                      example: 'Preparation'
        fields:
          type: array
          items:
            type: object
            properties:
              name:
                type: string
                example: 'roadcaptain'
              type:
                type: string
                enum: ['checkbox']
              label:
                type: string
                example: 'Wegkapitein'
        allocation_types:
          type: array
          nullable: true
          items:
            type: object
            properties:
              id:
                type: integer
                nullable: true
              name:
                type: string
                example: 'name of type'
              label:
                type: string
                example: 'Name of Type'
              slug:
                type: string
                example: 'name-of-type'
              start:
                type: string
                format: date-time
                nullable: true
              end:
                type: string
                format: date-time
                nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    resourceDataEntry:
      type: object
      properties:
        id:
          type: integer
        resource_id:
          type: integer
        label:
          type: string
          example: 'Jan Modaal'
          description: Use this field to display to the user
        created_at:
          type: string
          format: date-time
          nullable: true
          description: 'Due to past config, no timestamp was stored for historic records.'
          example: null
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: 'Due to past config, no timestamp was stored for historic records.'

    datasourceEntry:
      type: object
      properties:
        id:
          type: integer
        datasource_id:
          type: integer
        data:
          type: object
          properties:
            name:
              type: string
              example: 'Tour de France 2023'
            example2:
              type: string
              example: 'Lorem ipsum'
        created_at:
          type: string
          format: date-time
          nullable: true
          description: 'Due to past config, no timestamp was stored for historic records.'
          example: null
        updated_at:
          type: string
          format: date-time
          nullable: true
          description: 'Due to past config, no timestamp was stored for historic records.'

    datasourceProjectWithoutAllocationTypes:
      type: object
      properties:
        id:
          type: integer
        datasource_id:
          type: integer
          nullable: true
        label:
          type: string
          example: 'Tour de France 2023'
          description: Use this field to display to the user
        name:
          type: string
          example: 'Tour de France 2023'
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        color:
          type: string
          example: '#FF0000'
        extra_data:
          type: object
          nullable: true
          example:
            project_status: preparation
            status_color: null

    additionalAllocationData:
      type: object
      properties:
        roadcaptain:
          type: boolean
          example: 1

    datasourceProject:
      type: object
      allOf:
        - $ref: '#/components/schemas/datasourceProjectWithoutAllocationTypes'
        - $ref: '#/components/schemas/allocation_types'

    allocationsGrouped:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
          example: 'ploegleiders'
        label:
          type: string
          example: 'Ploegleiders'
          description: Use this field to display to the user
        slug:
          type: string
          example: 'ploegleiders'
          description: This is the name field slugified
        allocations:
          type: array
          items:
            $ref: '#/components/schemas/conflictAllocation'
        worked_days:
          type: object
          nullable: true
          $ref: '#/components/schemas/workedDays'
        fields:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/additionalAllocationData'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    workedDays:
      type: object
      properties:
        worked:
          type: integer
          nullable: true
        max:
          type: integer
          nullable: true
        difference:
          type: integer
          nullable: true

    conflictAllocation:
      type: object
      properties:
        id:
          type: integer
        resource_id:
          type: integer
        label:
          type: string
          example: 'Jan Modaal'
        type:
          type: string
          example: null
          nullable: true
        group:
          type: string
          example: 'ploegleiders'
          nullable: true
        comment:
          type: string
          nullable: true
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        fields:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/additionalAllocationData'
        conflicts:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              label:
                type: string
              project_id:
                type: integer
              project_label:
                type: string
              type:
                type: string
                nullable: true
              group:
                type: string
                nullable: true
              start:
                type: string
                format: date-time
              end:
                type: string
                format: date-time
              conflict_start:
                type: string
                format: date-time
              conflict_end:
                type: string
                format: date-time
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    projectBody:
      type: object
      required:
        - name
        - color
        - report_visible
        - exclude_in_workdays
        - start
        - end
      properties:
        name:
          type: string
          example: 'Tour de France 2023'
        color:
          type: string
          example: '#FF0000'
        report_visible:
          type: boolean
          example: true
        exclude_in_workdays:
          type: boolean
          example: false
        start:
          type: string
          format: date-time
          example: 10-2-2023
          description: 'Not required for dateless projects'
        end:
          type: string
          format: date-time
          example: 10-2-2024
          description: 'Not required for dateless projects'
        extra_data:
          type: object
          description: 'Field in here must exist in `extra_data_fields` on the project datasource'
          example:
            project_status: preparation
            status_color: null

    datasourceAllocationBody:
      type: object
      required:
        - project_id
        - resource_id
        - start
        - end
      properties:
        project_id:
          type: integer
          example: 510
        resource_id:
          type: integer
          example: 508
        start:
          type: string
          format: date-time
          example: 10-2-2023
        end:
          type: string
          format: date-time
          example: 10-2-2024
        group:
          type: string
          nullable: true
          example: dokter
        type:
          type: string
          nullable: true
          example: hpcvoor
        comment:
          type: string
          nullable: true

    datasourceAllocation:
      type: object
      description: 'Project and resource can be left out by server if that is better for resource usage'
      properties:
        id:
          type: integer
        project_id:
          type: integer
        resource_id:
          type: integer
        group:
          type: string
        type:
          type: string
        comment:
          type: string
        start:
          type: string
          format: date-time
        end:
          type: string
          format: date-time
        fields:
          type: array
          nullable: true
          items:
            $ref: '#/components/schemas/additionalAllocationData'
        project:
          nullable: true
          $ref: '#/components/schemas/datasourceProject'
        resource:
          nullable: true
          $ref: '#/components/schemas/datasourceResource'
        parent_id:
          type: integer
          nullable: true
        children:
          type: integer
          nullable: true
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    datasourceAllocationMultipleUpdateBody:
      type: object
      required:
        - allocations
      properties:
        allocations:
          type: array
          items:
            type: object
            required:
              - id
              - start
              - end
            properties:
              id:
                type: integer
                example: 508
              start:
                type: string
                format: date-time
                example: 10-2-2023
              end:
                type: string
                format: date-time
                example: 10-2-2024
              type:
                type: string
                nullable: true
                example: hpcvoor
              comment:
                type: string
                nullable: true
              parent_id:
                type: integer
                nullable: true
              fields:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/additionalAllocationData'

    datasourceAllocationMultipleBody:
      type: object
      required:
        - project_id
        - resources
      properties:
        project_id:
          type: integer
          example: 510
        group:
          type: string
          nullable: true
          example: dokter
        resources:
          type: array
          items:
            type: object
            required:
              - resource_id
              - start
              - end
            properties:
              resource_id:
                type: integer
                example: 508
              type:
                type: string
                nullable: true
                example: hpcvoor
              comment:
                type: string
                nullable: true
              start:
                type: string
                format: date-time
                example: 10-2-2023
              end:
                type: string
                format: date-time
                example: 10-2-2024
              parent_id:
                type: integer
                nullable: true
              fields:
                type: array
                nullable: true
                items:
                  $ref: '#/components/schemas/additionalAllocationData'

    datasourceAllocationMultiple:
      type: array
      items:
        $ref: '#/components/schemas/datasourceAllocation'

    datasourceResource:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
          example: 'Buschauffeurs'
          description: Use this field to display to the user
        name:
          type: string
          example: 'Buschauffeurs'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    resourceResource:
      type: object
      properties:
        id:
          type: integer
        label:
          type: string
          example: 'Buschauffeurs'
          description: Use this field to display to the user
        name:
          type: string
          example: 'Buschauffeurs'
        slug:
          type: string
          example: 'buschauffeurs'
          description: 'This is the name field slugified'

    entityDatumProjectResource:
      type: object
      properties:
        allocations_grouped:
          type: array
          items:
            type: object
            properties:
              id:
                type: integer
              label:
                type: string
              allocations:
                type: array
                items:
                  type: object
                  properties:
                    project_id:
                      type: integer
                    id:
                      type: integer
                    datasource_id:
                      type: integer
                      nullable: true
                    label:
                      type: string
                      example: 'Tour de France 2023'
                      description: Use this field to display to the user
                    name:
                      type: string
                      example: 'Tour de France 2023'
                    start:
                      type: string
                      format: date-time
                    end:
                      type: string
                      format: date-time
                    color:
                      type: string
                      example: '#FF0000'
                    extra_data:
                      type: object
                      nullable: true
                      example:
                        project_status: preparation
                        status_color: null
              created_at:
                type: string
                format: date-time
              updated_at:
                type: string
                format: date-time

    announcementResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        category:
          $ref: '#/components/schemas/announcementCategoryResource'
        title:
          type: string
          example: 'PQI maken'
        content:
          type: string
        read_receipt:
          type: boolean
        attachments:
          type: array
          items:
            $ref: '#/components/schemas/mediaResource'
        sender:
          type: object
          properties:
            fullname:
              type: string
              example: 'John Doe'
        statuses:
          type: array
          items:
            $ref: '#/components/schemas/announcementStatusResource'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    chatResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        client_id:
          type: integer
          example: 2
        chattable_type:
          type: string
          example: "App\\Models\\Group"
        chattable_id:
          type: integer
          example: 3
        name:
          type: string
          example: 'Group chat'
        messages:
          type: object
          properties:
            data:
              type: array
              items:
                $ref: '#/components/schemas/chatMessageResource'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    chatMessageResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        chat_id:
          type: integer
          example: 1
        text:
          type: string
          example: 'Hello world'
        user:
          $ref: '#/components/schemas/userResource'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    userResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        fullname:
          type: string
          example: 'John Doe'
        email:
          type: string
          example: 'john@example.com'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    announcementStatusBody:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          enum:
            [
              'read_at',
              'retrieved',
              'opened',
              'scrolled_down',
              'opened_attachment',
              'confirmed_messages_read'
            ]

    messageResourceBody:
      type: object
      required:
        - text
      properties:
        text:
          type: string
          example: 'Hello world'

    announcementStatusResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        announcement_user_id:
          type: integer
          example: 1
        status:
          type: string
          enum:
            [
              'read_at',
              'retrieved',
              'opened',
              'scrolled_down',
              'opened_attachment',
              'confirmed_messages_read'
            ]
        media:
          nullable: true
          $ref: '#/components/schemas/mediaResource'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    announcementCategoryResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
        icon:
          nullable: true
          $ref: '#/components/schemas/mediaResource'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    mediaResource:
      type: object
      properties:
        id:
          type: integer
          example: 1
        name:
          type: string
          example: 'test'
        file_name:
          type: string
          example: 'test.pdf'
        open_label:
          type: object
          properties:
            en:
              type: string
              example: 'Open test'
            nl:
              type: string
              example: 'Bekijk test'
        mime_type:
          type: string
          example: 'application/pdf'
        path:
          type: string
          description: 'Path can be used to retrieve file'
        uuid:
          type: string
          example: '2c16a0c0-c793-488e-8796-2301ca3fb27a'
        created_at:
          type: string
          format: date-time
        updated_at:
          type: string
          format: date-time

    authConfiguration:
      type: object
      properties:
        id:
          type: integer
          example: 100
        client_id:
          type: string
          example: '28dfbd55-e888-459c-bc77-ddd3d03b16ce'
        name:
          type: string
          example: 'Apperto'
        issuer:
          type: string
          example: 'https://sso.example'
        endpoints:
          type: object
          properties:
            authorization_endpoint:
              type: string
              example: 'https://sso.example/oauth/authorize'
            token_endpoint:
              type: string
              example: 'https://sso.example/oauth/token'
            userinfo_endpoint:
              type: string
              example: null
              nullable: true
            jwks_uri:
              type: string
              example: 'https://sso.example/.well-known/jwks.json'
            end_session_endpoint:
              type: string
              example: null
              nullable: true
            introspection_endpoint:
              type: string
              example: null
              nullable: true
            revocation_endpoint:
              type: string
              example: null
              nullable: true
        scopes:
          type: array
          items:
            type: string
            example: 'openid'
        button_labels:
          type: object
          properties:
            en:
              type: string
              example: 'Sign in with Apperto'
            nl:
              type: string
              example: 'Inloggen met Apperto'
        order:
          type: integer
          example: 1
          description: 'Order for the sign in buttons'
        hidden:
          type: boolean
          example: false
          description: 'Wether or not the login option is hidden behind clicking on the apperto logo'
        image:
          type: string
          nullable: true
          example: null
        updated_at:
          type: string
          format: date-time

  responses:
    unprocessable:
      description: Unprocessable entity, validation error
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: 'First validation error or general message'
                example: '<human readable key> bestaat niet.'
              errors:
                type: object
                properties:
                  '<key-of-parameter-that-failed-validation>':
                    type: array
                    description: 'List with one or more problems that this key has'
                    items:
                      type: string
                      description: 'User displayable error message'
                      example: '<human readable key> bestaat niet.'
    unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                example: 'This action is unauthorized.'
    serverErrorStore:
      description: Server error, could not store
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: 'Developer oriented error message'
                example: '<Resource> could not be stored.'
    serverErrorUpdate:
      description: Server error, could not update
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: 'Developer oriented error message'
                example: '<Resource> could not be updated.'
    serverErrorDelete:
      description: Server error, could not delete
      content:
        application/json:
          schema:
            type: object
            properties:
              message:
                type: string
                description: 'Developer oriented error message'
                example: '<Resource> could not be deleted.'
    noContentDeleted:
      description: 'Resource was deleted successfully'

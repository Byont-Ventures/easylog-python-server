/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  DatasourceAllocationBody,
  DatasourceAllocationMultipleBody,
  DatasourceAllocationMultipleUpdateBody,
  V2DatasourcesAllocationsMultipleGet200Response,
  V2DatasourcesAllocationsMultipleGet500Response,
  V2DatasourcesAllocationsMultiplePut201Response,
  V2DatasourcesAllocationsPost201Response,
  V2DatasourcesDatasourceIdProjectPost403Response,
  V2DatasourcesDatasourceIdProjectPost422Response,
  V2DatasourcesDatasourceIdProjectPost500Response,
  V2DatasourcesProjectsProjectIdDelete500Response
} from '../models/index';
import {
  DatasourceAllocationBodyFromJSON,
  DatasourceAllocationBodyToJSON,
  DatasourceAllocationMultipleBodyFromJSON,
  DatasourceAllocationMultipleBodyToJSON,
  DatasourceAllocationMultipleUpdateBodyFromJSON,
  DatasourceAllocationMultipleUpdateBodyToJSON,
  V2DatasourcesAllocationsMultipleGet200ResponseFromJSON,
  V2DatasourcesAllocationsMultipleGet200ResponseToJSON,
  V2DatasourcesAllocationsMultipleGet500ResponseFromJSON,
  V2DatasourcesAllocationsMultipleGet500ResponseToJSON,
  V2DatasourcesAllocationsMultiplePut201ResponseFromJSON,
  V2DatasourcesAllocationsMultiplePut201ResponseToJSON,
  V2DatasourcesAllocationsPost201ResponseFromJSON,
  V2DatasourcesAllocationsPost201ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseToJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseFromJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseToJSON
} from '../models/index';

export interface V2DatasourcesAllocationsAllocationIdDeleteRequest {
  allocationId: number;
}

export interface V2DatasourcesAllocationsAllocationIdGetRequest {
  allocationId: number;
}

export interface V2DatasourcesAllocationsAllocationIdPutRequest {
  allocationId: number;
}

export interface V2DatasourcesAllocationsMultipleGetRequest {
  ids: string;
}

export interface V2DatasourcesAllocationsMultiplePostRequest {
  datasourceAllocationMultipleBody: DatasourceAllocationMultipleBody;
}

export interface V2DatasourcesAllocationsMultiplePutRequest {
  datasourceAllocationMultipleUpdateBody: DatasourceAllocationMultipleUpdateBody;
}

export interface V2DatasourcesAllocationsPostRequest {
  datasourceAllocationBody: DatasourceAllocationBody;
}

export class AllocationsApi extends runtime.BaseAPI {
  /** Delete an allocation */
  async v2DatasourcesAllocationsAllocationIdDeleteRaw(
    requestParameters: V2DatasourcesAllocationsAllocationIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['allocationId'] == null) {
      throw new runtime.RequiredError(
        'allocationId',
        'Required parameter "allocationId" was null or undefined when calling v2DatasourcesAllocationsAllocationIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocationId}`.replace(
          `{${'allocationId'}}`,
          encodeURIComponent(String(requestParameters['allocationId']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Delete an allocation */
  async v2DatasourcesAllocationsAllocationIdDelete(
    requestParameters: V2DatasourcesAllocationsAllocationIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.v2DatasourcesAllocationsAllocationIdDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /** Retrieve allocation */
  async v2DatasourcesAllocationsAllocationIdGetRaw(
    requestParameters: V2DatasourcesAllocationsAllocationIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesAllocationsPost201Response>> {
    if (requestParameters['allocationId'] == null) {
      throw new runtime.RequiredError(
        'allocationId',
        'Required parameter "allocationId" was null or undefined when calling v2DatasourcesAllocationsAllocationIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocationId}`.replace(
          `{${'allocationId'}}`,
          encodeURIComponent(String(requestParameters['allocationId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsPost201ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve allocation */
  async v2DatasourcesAllocationsAllocationIdGet(
    requestParameters: V2DatasourcesAllocationsAllocationIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsPost201Response> {
    const response = await this.v2DatasourcesAllocationsAllocationIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Update allocation
   *
   * @deprecated
   */
  async v2DatasourcesAllocationsAllocationIdPutRaw(
    requestParameters: V2DatasourcesAllocationsAllocationIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesAllocationsPost201Response>> {
    if (requestParameters['allocationId'] == null) {
      throw new runtime.RequiredError(
        'allocationId',
        'Required parameter "allocationId" was null or undefined when calling v2DatasourcesAllocationsAllocationIdPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/{allocationId}`.replace(
          `{${'allocationId'}}`,
          encodeURIComponent(String(requestParameters['allocationId']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsPost201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Update allocation
   *
   * @deprecated
   */
  async v2DatasourcesAllocationsAllocationIdPut(
    requestParameters: V2DatasourcesAllocationsAllocationIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsPost201Response> {
    const response = await this.v2DatasourcesAllocationsAllocationIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Retrieve allocations */
  async v2DatasourcesAllocationsMultipleGetRaw(
    requestParameters: V2DatasourcesAllocationsMultipleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesAllocationsMultipleGet200Response>
  > {
    if (requestParameters['ids'] == null) {
      throw new runtime.RequiredError(
        'ids',
        'Required parameter "ids" was null or undefined when calling v2DatasourcesAllocationsMultipleGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['ids'] != null) {
      queryParameters['ids'] = requestParameters['ids'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsMultipleGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve allocations */
  async v2DatasourcesAllocationsMultipleGet(
    requestParameters: V2DatasourcesAllocationsMultipleGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsMultipleGet200Response> {
    const response = await this.v2DatasourcesAllocationsMultipleGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Store multiple allocations */
  async v2DatasourcesAllocationsMultiplePostRaw(
    requestParameters: V2DatasourcesAllocationsMultiplePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesAllocationsMultiplePut201Response>
  > {
    if (requestParameters['datasourceAllocationMultipleBody'] == null) {
      throw new runtime.RequiredError(
        'datasourceAllocationMultipleBody',
        'Required parameter "datasourceAllocationMultipleBody" was null or undefined when calling v2DatasourcesAllocationsMultiplePost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DatasourceAllocationMultipleBodyToJSON(
          requestParameters['datasourceAllocationMultipleBody']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsMultiplePut201ResponseFromJSON(jsonValue)
    );
  }

  /** Store multiple allocations */
  async v2DatasourcesAllocationsMultiplePost(
    requestParameters: V2DatasourcesAllocationsMultiplePostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsMultiplePut201Response> {
    const response = await this.v2DatasourcesAllocationsMultiplePostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update multiple allocations */
  async v2DatasourcesAllocationsMultiplePutRaw(
    requestParameters: V2DatasourcesAllocationsMultiplePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesAllocationsMultiplePut201Response>
  > {
    if (requestParameters['datasourceAllocationMultipleUpdateBody'] == null) {
      throw new runtime.RequiredError(
        'datasourceAllocationMultipleUpdateBody',
        'Required parameter "datasourceAllocationMultipleUpdateBody" was null or undefined when calling v2DatasourcesAllocationsMultiplePut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations/multiple`,
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: DatasourceAllocationMultipleUpdateBodyToJSON(
          requestParameters['datasourceAllocationMultipleUpdateBody']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsMultiplePut201ResponseFromJSON(jsonValue)
    );
  }

  /** Update multiple allocations */
  async v2DatasourcesAllocationsMultiplePut(
    requestParameters: V2DatasourcesAllocationsMultiplePutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsMultiplePut201Response> {
    const response = await this.v2DatasourcesAllocationsMultiplePutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Store allocation
   *
   * @deprecated
   */
  async v2DatasourcesAllocationsPostRaw(
    requestParameters: V2DatasourcesAllocationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesAllocationsPost201Response>> {
    if (requestParameters['datasourceAllocationBody'] == null) {
      throw new runtime.RequiredError(
        'datasourceAllocationBody',
        'Required parameter "datasourceAllocationBody" was null or undefined when calling v2DatasourcesAllocationsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/allocations`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: DatasourceAllocationBodyToJSON(
          requestParameters['datasourceAllocationBody']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesAllocationsPost201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Store allocation
   *
   * @deprecated
   */
  async v2DatasourcesAllocationsPost(
    requestParameters: V2DatasourcesAllocationsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesAllocationsPost201Response> {
    const response = await this.v2DatasourcesAllocationsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

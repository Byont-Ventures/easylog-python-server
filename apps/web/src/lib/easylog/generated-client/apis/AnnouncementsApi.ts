/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  AnnouncementStatusBody,
  V2AnnouncementAnnouncementIdGet200Response,
  V2AnnouncementsGet200Response
} from '../models/index';
import {
  AnnouncementStatusBodyFromJSON,
  AnnouncementStatusBodyToJSON,
  V2AnnouncementAnnouncementIdGet200ResponseFromJSON,
  V2AnnouncementAnnouncementIdGet200ResponseToJSON,
  V2AnnouncementsGet200ResponseFromJSON,
  V2AnnouncementsGet200ResponseToJSON
} from '../models/index';

export interface V2AnnouncementAnnouncementIdGetRequest {
  announcementId: number;
}

export interface V2AnnouncementAnnouncementIdStatusPostRequest {
  announcementId: number;
  announcementStatusBody: AnnouncementStatusBody;
}

export class AnnouncementsApi extends runtime.BaseAPI {
  /** Retrieve a single announcement based on the id Get announcement */
  async v2AnnouncementAnnouncementIdGetRaw(
    requestParameters: V2AnnouncementAnnouncementIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2AnnouncementAnnouncementIdGet200Response>> {
    if (requestParameters['announcementId'] == null) {
      throw new runtime.RequiredError(
        'announcementId',
        'Required parameter "announcementId" was null or undefined when calling v2AnnouncementAnnouncementIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/announcement/{announcementId}`.replace(
          `{${'announcementId'}}`,
          encodeURIComponent(String(requestParameters['announcementId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2AnnouncementAnnouncementIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve a single announcement based on the id Get announcement */
  async v2AnnouncementAnnouncementIdGet(
    requestParameters: V2AnnouncementAnnouncementIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2AnnouncementAnnouncementIdGet200Response> {
    const response = await this.v2AnnouncementAnnouncementIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update announcement statuses */
  async v2AnnouncementAnnouncementIdStatusPostRaw(
    requestParameters: V2AnnouncementAnnouncementIdStatusPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2AnnouncementsGet200Response>> {
    if (requestParameters['announcementId'] == null) {
      throw new runtime.RequiredError(
        'announcementId',
        'Required parameter "announcementId" was null or undefined when calling v2AnnouncementAnnouncementIdStatusPost().'
      );
    }

    if (requestParameters['announcementStatusBody'] == null) {
      throw new runtime.RequiredError(
        'announcementStatusBody',
        'Required parameter "announcementStatusBody" was null or undefined when calling v2AnnouncementAnnouncementIdStatusPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/announcement/{announcementId}/status`.replace(
          `{${'announcementId'}}`,
          encodeURIComponent(String(requestParameters['announcementId']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: AnnouncementStatusBodyToJSON(
          requestParameters['announcementStatusBody']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2AnnouncementsGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Update announcement statuses */
  async v2AnnouncementAnnouncementIdStatusPost(
    requestParameters: V2AnnouncementAnnouncementIdStatusPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2AnnouncementsGet200Response> {
    const response = await this.v2AnnouncementAnnouncementIdStatusPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Retrieve all announcements for the authenticated user Get announcements */
  async v2AnnouncementsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2AnnouncementsGet200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/announcements`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2AnnouncementsGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Retrieve all announcements for the authenticated user Get announcements */
  async v2AnnouncementsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2AnnouncementsGet200Response> {
    const response = await this.v2AnnouncementsGetRaw(initOverrides);
    return await response.value();
  }
}

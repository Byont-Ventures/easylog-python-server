/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  MessageResourceBody,
  V2ChatChatIdMessagesGet200Response,
  V2ChatsGet200Response
} from '../models/index';
import {
  MessageResourceBodyFromJSON,
  MessageResourceBodyToJSON,
  V2ChatChatIdMessagesGet200ResponseFromJSON,
  V2ChatChatIdMessagesGet200ResponseToJSON,
  V2ChatsGet200ResponseFromJSON,
  V2ChatsGet200ResponseToJSON
} from '../models/index';

export interface V2ChatChatIdMessagesGetRequest {
  chatId: number;
}

export interface V2ChatChatIdMessagesPostRequest {
  chatId: number;
  messageResourceBody: MessageResourceBody;
}

export class ChatsAlphaApi extends runtime.BaseAPI {
  /** Get all messages of a chat */
  async v2ChatChatIdMessagesGetRaw(
    requestParameters: V2ChatChatIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2ChatChatIdMessagesGet200Response>> {
    if (requestParameters['chatId'] == null) {
      throw new runtime.RequiredError(
        'chatId',
        'Required parameter "chatId" was null or undefined when calling v2ChatChatIdMessagesGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/chat/{chatId}/messages`.replace(
          `{${'chatId'}}`,
          encodeURIComponent(String(requestParameters['chatId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2ChatChatIdMessagesGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get all messages of a chat */
  async v2ChatChatIdMessagesGet(
    requestParameters: V2ChatChatIdMessagesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2ChatChatIdMessagesGet200Response> {
    const response = await this.v2ChatChatIdMessagesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Store a new message */
  async v2ChatChatIdMessagesPostRaw(
    requestParameters: V2ChatChatIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2ChatChatIdMessagesGet200Response>> {
    if (requestParameters['chatId'] == null) {
      throw new runtime.RequiredError(
        'chatId',
        'Required parameter "chatId" was null or undefined when calling v2ChatChatIdMessagesPost().'
      );
    }

    if (requestParameters['messageResourceBody'] == null) {
      throw new runtime.RequiredError(
        'messageResourceBody',
        'Required parameter "messageResourceBody" was null or undefined when calling v2ChatChatIdMessagesPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/chat/{chatId}/messages`.replace(
          `{${'chatId'}}`,
          encodeURIComponent(String(requestParameters['chatId']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: MessageResourceBodyToJSON(
          requestParameters['messageResourceBody']
        )
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2ChatChatIdMessagesGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Store a new message */
  async v2ChatChatIdMessagesPost(
    requestParameters: V2ChatChatIdMessagesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2ChatChatIdMessagesGet200Response> {
    const response = await this.v2ChatChatIdMessagesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Get all chats of the authenticated user */
  async v2ChatsGetRaw(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2ChatsGet200Response>> {
    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/chats`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2ChatsGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get all chats of the authenticated user */
  async v2ChatsGet(
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2ChatsGet200Response> {
    const response = await this.v2ChatsGetRaw(initOverrides);
    return await response.value();
  }
}

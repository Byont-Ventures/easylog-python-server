/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  V2DatasourcesDatasourceIdEntriesEntryIdGet200Response,
  V2DatasourcesDatasourceIdGet200Response,
  V2DatasourcesGet200Response
} from '../models/index';
import {
  V2DatasourcesDatasourceIdEntriesEntryIdGet200ResponseFromJSON,
  V2DatasourcesDatasourceIdEntriesEntryIdGet200ResponseToJSON,
  V2DatasourcesDatasourceIdGet200ResponseFromJSON,
  V2DatasourcesDatasourceIdGet200ResponseToJSON,
  V2DatasourcesGet200ResponseFromJSON,
  V2DatasourcesGet200ResponseToJSON
} from '../models/index';

export interface V2DatasourcesDatasourceIdEntriesEntryIdGetRequest {
  datasourceId: string;
  entryId: number;
}

export interface V2DatasourcesDatasourceIdGetRequest {
  datasourceId: string;
}

export interface V2DatasourcesGetRequest {
  types?: Array<string>;
}

export class DatasourcesApi extends runtime.BaseAPI {
  /** Get a datasource entry by id. */
  async v2DatasourcesDatasourceIdEntriesEntryIdGetRaw(
    requestParameters: V2DatasourcesDatasourceIdEntriesEntryIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesDatasourceIdEntriesEntryIdGet200Response>
  > {
    if (requestParameters['datasourceId'] == null) {
      throw new runtime.RequiredError(
        'datasourceId',
        'Required parameter "datasourceId" was null or undefined when calling v2DatasourcesDatasourceIdEntriesEntryIdGet().'
      );
    }

    if (requestParameters['entryId'] == null) {
      throw new runtime.RequiredError(
        'entryId',
        'Required parameter "entryId" was null or undefined when calling v2DatasourcesDatasourceIdEntriesEntryIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/{datasourceId}/entries/{entryId}`
          .replace(
            `{${'datasourceId'}}`,
            encodeURIComponent(String(requestParameters['datasourceId']))
          )
          .replace(
            `{${'entryId'}}`,
            encodeURIComponent(String(requestParameters['entryId']))
          ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesDatasourceIdEntriesEntryIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get a datasource entry by id. */
  async v2DatasourcesDatasourceIdEntriesEntryIdGet(
    requestParameters: V2DatasourcesDatasourceIdEntriesEntryIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesDatasourceIdEntriesEntryIdGet200Response> {
    const response = await this.v2DatasourcesDatasourceIdEntriesEntryIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * The fields array is only available on the /datasources/{id|slug}
   * endpoint. Get a datasource by id or by slug.
   */
  async v2DatasourcesDatasourceIdGetRaw(
    requestParameters: V2DatasourcesDatasourceIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesDatasourceIdGet200Response>> {
    if (requestParameters['datasourceId'] == null) {
      throw new runtime.RequiredError(
        'datasourceId',
        'Required parameter "datasourceId" was null or undefined when calling v2DatasourcesDatasourceIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/{datasourceId}`.replace(
          `{${'datasourceId'}}`,
          encodeURIComponent(String(requestParameters['datasourceId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesDatasourceIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * The fields array is only available on the /datasources/{id|slug}
   * endpoint. Get a datasource by id or by slug.
   */
  async v2DatasourcesDatasourceIdGet(
    requestParameters: V2DatasourcesDatasourceIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesDatasourceIdGet200Response> {
    const response = await this.v2DatasourcesDatasourceIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * The fields array is only available on the /datasources/{id|slug}
   * endpoint. Get all datasources by client.
   */
  async v2DatasourcesGetRaw(
    requestParameters: V2DatasourcesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesGet200Response>> {
    const queryParameters: any = {};

    if (requestParameters['types'] != null) {
      queryParameters['types'] = requestParameters['types'];
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesGet200ResponseFromJSON(jsonValue)
    );
  }

  /**
   * The fields array is only available on the /datasources/{id|slug}
   * endpoint. Get all datasources by client.
   */
  async v2DatasourcesGet(
    requestParameters: V2DatasourcesGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesGet200Response> {
    const response = await this.v2DatasourcesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  ProjectBody,
  V2DatasourcesDatasourceIdProjectPost201Response,
  V2DatasourcesDatasourceIdProjectPost403Response,
  V2DatasourcesDatasourceIdProjectPost422Response,
  V2DatasourcesDatasourceIdProjectPost500Response,
  V2DatasourcesProjectsGet200Response,
  V2DatasourcesProjectsProjectIdDelete500Response,
  V2DatasourcesProjectsProjectIdGet200Response
} from '../models/index';
import {
  ProjectBodyFromJSON,
  ProjectBodyToJSON,
  V2DatasourcesDatasourceIdProjectPost201ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost201ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseToJSON,
  V2DatasourcesProjectsGet200ResponseFromJSON,
  V2DatasourcesProjectsGet200ResponseToJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseFromJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseToJSON,
  V2DatasourcesProjectsProjectIdGet200ResponseFromJSON,
  V2DatasourcesProjectsProjectIdGet200ResponseToJSON
} from '../models/index';

export interface V2DatasourcesDatasourceIdProjectPostRequest {
  datasourceId: string;
  projectBody: ProjectBody;
}

export interface V2DatasourcesProjectsGetRequest {
  startDate?: Date;
  endDate?: Date;
}

export interface V2DatasourcesProjectsPostRequest {
  projectBody: ProjectBody;
}

export interface V2DatasourcesProjectsProjectIdDeleteRequest {
  projectId: number;
}

export interface V2DatasourcesProjectsProjectIdGetRequest {
  projectId: number;
  startDate?: Date;
  endDate?: Date;
}

export interface V2DatasourcesProjectsProjectIdPutRequest {
  projectId: number;
  projectBody: ProjectBody;
}

export class PlanningApi extends runtime.BaseAPI {
  /** Store single project */
  async v2DatasourcesDatasourceIdProjectPostRaw(
    requestParameters: V2DatasourcesDatasourceIdProjectPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesDatasourceIdProjectPost201Response>
  > {
    if (requestParameters['datasourceId'] == null) {
      throw new runtime.RequiredError(
        'datasourceId',
        'Required parameter "datasourceId" was null or undefined when calling v2DatasourcesDatasourceIdProjectPost().'
      );
    }

    if (requestParameters['projectBody'] == null) {
      throw new runtime.RequiredError(
        'projectBody',
        'Required parameter "projectBody" was null or undefined when calling v2DatasourcesDatasourceIdProjectPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/{datasourceId}/project`.replace(
          `{${'datasourceId'}}`,
          encodeURIComponent(String(requestParameters['datasourceId']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectBodyToJSON(requestParameters['projectBody'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesDatasourceIdProjectPost201ResponseFromJSON(jsonValue)
    );
  }

  /** Store single project */
  async v2DatasourcesDatasourceIdProjectPost(
    requestParameters: V2DatasourcesDatasourceIdProjectPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesDatasourceIdProjectPost201Response> {
    const response = await this.v2DatasourcesDatasourceIdProjectPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Get a list of all projects */
  async v2DatasourcesProjectsGetRaw(
    requestParameters: V2DatasourcesProjectsGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesProjectsGet200Response>> {
    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['start_date'] = (requestParameters['startDate'] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['end_date'] = (requestParameters['endDate'] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/projects`,
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesProjectsGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get a list of all projects */
  async v2DatasourcesProjectsGet(
    requestParameters: V2DatasourcesProjectsGetRequest = {},
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesProjectsGet200Response> {
    const response = await this.v2DatasourcesProjectsGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /**
   * Store project
   *
   * @deprecated
   */
  async v2DatasourcesProjectsPostRaw(
    requestParameters: V2DatasourcesProjectsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesDatasourceIdProjectPost201Response>
  > {
    if (requestParameters['projectBody'] == null) {
      throw new runtime.RequiredError(
        'projectBody',
        'Required parameter "projectBody" was null or undefined when calling v2DatasourcesProjectsPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/projects`,
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectBodyToJSON(requestParameters['projectBody'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesDatasourceIdProjectPost201ResponseFromJSON(jsonValue)
    );
  }

  /**
   * Store project
   *
   * @deprecated
   */
  async v2DatasourcesProjectsPost(
    requestParameters: V2DatasourcesProjectsPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesDatasourceIdProjectPost201Response> {
    const response = await this.v2DatasourcesProjectsPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Delete a project */
  async v2DatasourcesProjectsProjectIdDeleteRaw(
    requestParameters: V2DatasourcesProjectsProjectIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling v2DatasourcesProjectsProjectIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Delete a project */
  async v2DatasourcesProjectsProjectIdDelete(
    requestParameters: V2DatasourcesProjectsProjectIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.v2DatasourcesProjectsProjectIdDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /** Get the details of a project */
  async v2DatasourcesProjectsProjectIdGetRaw(
    requestParameters: V2DatasourcesProjectsProjectIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesProjectsProjectIdGet200Response>
  > {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling v2DatasourcesProjectsProjectIdGet().'
      );
    }

    const queryParameters: any = {};

    if (requestParameters['startDate'] != null) {
      queryParameters['start_date'] = (requestParameters['startDate'] as any)
        .toISOString()
        .substring(0, 10);
    }

    if (requestParameters['endDate'] != null) {
      queryParameters['end_date'] = (requestParameters['endDate'] as any)
        .toISOString()
        .substring(0, 10);
    }

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesProjectsProjectIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get the details of a project */
  async v2DatasourcesProjectsProjectIdGet(
    requestParameters: V2DatasourcesProjectsProjectIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesProjectsProjectIdGet200Response> {
    const response = await this.v2DatasourcesProjectsProjectIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update project */
  async v2DatasourcesProjectsProjectIdPutRaw(
    requestParameters: V2DatasourcesProjectsProjectIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesDatasourceIdProjectPost201Response>
  > {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling v2DatasourcesProjectsProjectIdPut().'
      );
    }

    if (requestParameters['projectBody'] == null) {
      throw new runtime.RequiredError(
        'projectBody',
        'Required parameter "projectBody" was null or undefined when calling v2DatasourcesProjectsProjectIdPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/projects/{projectId}`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: ProjectBodyToJSON(requestParameters['projectBody'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesDatasourceIdProjectPost201ResponseFromJSON(jsonValue)
    );
  }

  /** Update project */
  async v2DatasourcesProjectsProjectIdPut(
    requestParameters: V2DatasourcesProjectsProjectIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesDatasourceIdProjectPost201Response> {
    const response = await this.v2DatasourcesProjectsProjectIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import * as runtime from '../runtime';
import type {
  PhaseBody,
  PhaseUpdateBody,
  V2DatasourcesDatasourceIdProjectPost403Response,
  V2DatasourcesDatasourceIdProjectPost422Response,
  V2DatasourcesDatasourceIdProjectPost500Response,
  V2DatasourcesPhasesPhaseIdGet200Response,
  V2DatasourcesProjectProjectIdPhasesGet200Response,
  V2DatasourcesProjectsProjectIdDelete500Response
} from '../models/index';
import {
  PhaseBodyFromJSON,
  PhaseBodyToJSON,
  PhaseUpdateBodyFromJSON,
  PhaseUpdateBodyToJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost403ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost422ResponseToJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseFromJSON,
  V2DatasourcesDatasourceIdProjectPost500ResponseToJSON,
  V2DatasourcesPhasesPhaseIdGet200ResponseFromJSON,
  V2DatasourcesPhasesPhaseIdGet200ResponseToJSON,
  V2DatasourcesProjectProjectIdPhasesGet200ResponseFromJSON,
  V2DatasourcesProjectProjectIdPhasesGet200ResponseToJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseFromJSON,
  V2DatasourcesProjectsProjectIdDelete500ResponseToJSON
} from '../models/index';

export interface V2DatasourcesPhasesPhaseIdDeleteRequest {
  phaseId: number;
}

export interface V2DatasourcesPhasesPhaseIdGetRequest {
  phaseId: number;
}

export interface V2DatasourcesPhasesPhaseIdPutRequest {
  phaseId: number;
  phaseUpdateBody: PhaseUpdateBody;
}

export interface V2DatasourcesProjectProjectIdPhasesGetRequest {
  projectId: number;
}

export interface V2DatasourcesProjectProjectIdPhasesPostRequest {
  projectId: number;
  phaseBody: PhaseBody;
}

export class PlanningPhasesApi extends runtime.BaseAPI {
  /** Delete a phase */
  async v2DatasourcesPhasesPhaseIdDeleteRaw(
    requestParameters: V2DatasourcesPhasesPhaseIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<void>> {
    if (requestParameters['phaseId'] == null) {
      throw new runtime.RequiredError(
        'phaseId',
        'Required parameter "phaseId" was null or undefined when calling v2DatasourcesPhasesPhaseIdDelete().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/phases/{phaseId}`.replace(
          `{${'phaseId'}}`,
          encodeURIComponent(String(requestParameters['phaseId']))
        ),
        method: 'DELETE',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.VoidApiResponse(response);
  }

  /** Delete a phase */
  async v2DatasourcesPhasesPhaseIdDelete(
    requestParameters: V2DatasourcesPhasesPhaseIdDeleteRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<void> {
    await this.v2DatasourcesPhasesPhaseIdDeleteRaw(
      requestParameters,
      initOverrides
    );
  }

  /** Get phase details */
  async v2DatasourcesPhasesPhaseIdGetRaw(
    requestParameters: V2DatasourcesPhasesPhaseIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesPhasesPhaseIdGet200Response>> {
    if (requestParameters['phaseId'] == null) {
      throw new runtime.RequiredError(
        'phaseId',
        'Required parameter "phaseId" was null or undefined when calling v2DatasourcesPhasesPhaseIdGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/phases/{phaseId}`.replace(
          `{${'phaseId'}}`,
          encodeURIComponent(String(requestParameters['phaseId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesPhasesPhaseIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get phase details */
  async v2DatasourcesPhasesPhaseIdGet(
    requestParameters: V2DatasourcesPhasesPhaseIdGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesPhasesPhaseIdGet200Response> {
    const response = await this.v2DatasourcesPhasesPhaseIdGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Update phase */
  async v2DatasourcesPhasesPhaseIdPutRaw(
    requestParameters: V2DatasourcesPhasesPhaseIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesPhasesPhaseIdGet200Response>> {
    if (requestParameters['phaseId'] == null) {
      throw new runtime.RequiredError(
        'phaseId',
        'Required parameter "phaseId" was null or undefined when calling v2DatasourcesPhasesPhaseIdPut().'
      );
    }

    if (requestParameters['phaseUpdateBody'] == null) {
      throw new runtime.RequiredError(
        'phaseUpdateBody',
        'Required parameter "phaseUpdateBody" was null or undefined when calling v2DatasourcesPhasesPhaseIdPut().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/phases/{phaseId}`.replace(
          `{${'phaseId'}}`,
          encodeURIComponent(String(requestParameters['phaseId']))
        ),
        method: 'PUT',
        headers: headerParameters,
        query: queryParameters,
        body: PhaseUpdateBodyToJSON(requestParameters['phaseUpdateBody'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesPhasesPhaseIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Update phase */
  async v2DatasourcesPhasesPhaseIdPut(
    requestParameters: V2DatasourcesPhasesPhaseIdPutRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesPhasesPhaseIdGet200Response> {
    const response = await this.v2DatasourcesPhasesPhaseIdPutRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Get a list of all phases in this project */
  async v2DatasourcesProjectProjectIdPhasesGetRaw(
    requestParameters: V2DatasourcesProjectProjectIdPhasesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<
    runtime.ApiResponse<V2DatasourcesProjectProjectIdPhasesGet200Response>
  > {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling v2DatasourcesProjectProjectIdPhasesGet().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/project/{projectId}/phases`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId']))
        ),
        method: 'GET',
        headers: headerParameters,
        query: queryParameters
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesProjectProjectIdPhasesGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Get a list of all phases in this project */
  async v2DatasourcesProjectProjectIdPhasesGet(
    requestParameters: V2DatasourcesProjectProjectIdPhasesGetRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesProjectProjectIdPhasesGet200Response> {
    const response = await this.v2DatasourcesProjectProjectIdPhasesGetRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }

  /** Create a new phase */
  async v2DatasourcesProjectProjectIdPhasesPostRaw(
    requestParameters: V2DatasourcesProjectProjectIdPhasesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<runtime.ApiResponse<V2DatasourcesPhasesPhaseIdGet200Response>> {
    if (requestParameters['projectId'] == null) {
      throw new runtime.RequiredError(
        'projectId',
        'Required parameter "projectId" was null or undefined when calling v2DatasourcesProjectProjectIdPhasesPost().'
      );
    }

    if (requestParameters['phaseBody'] == null) {
      throw new runtime.RequiredError(
        'phaseBody',
        'Required parameter "phaseBody" was null or undefined when calling v2DatasourcesProjectProjectIdPhasesPost().'
      );
    }

    const queryParameters: any = {};

    const headerParameters: runtime.HTTPHeaders = {};

    headerParameters['Content-Type'] = 'application/json';

    if (this.configuration && this.configuration.accessToken) {
      const token = this.configuration.accessToken;
      const tokenString = await token('bearer', []);

      if (tokenString) {
        headerParameters['Authorization'] = `Bearer ${tokenString}`;
      }
    }
    const response = await this.request(
      {
        path: `/v2/datasources/project/{projectId}/phases`.replace(
          `{${'projectId'}}`,
          encodeURIComponent(String(requestParameters['projectId']))
        ),
        method: 'POST',
        headers: headerParameters,
        query: queryParameters,
        body: PhaseBodyToJSON(requestParameters['phaseBody'])
      },
      initOverrides
    );

    return new runtime.JSONApiResponse(response, (jsonValue) =>
      V2DatasourcesPhasesPhaseIdGet200ResponseFromJSON(jsonValue)
    );
  }

  /** Create a new phase */
  async v2DatasourcesProjectProjectIdPhasesPost(
    requestParameters: V2DatasourcesProjectProjectIdPhasesPostRequest,
    initOverrides?: RequestInit | runtime.InitOverrideFunction
  ): Promise<V2DatasourcesPhasesPhaseIdGet200Response> {
    const response = await this.v2DatasourcesProjectProjectIdPhasesPostRaw(
      requestParameters,
      initOverrides
    );
    return await response.value();
  }
}

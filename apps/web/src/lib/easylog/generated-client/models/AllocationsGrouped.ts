/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { AdditionalAllocationData } from './AdditionalAllocationData';
import {
  AdditionalAllocationDataFromJSON,
  AdditionalAllocationDataFromJSONTyped,
  AdditionalAllocationDataToJSON,
  AdditionalAllocationDataToJSONTyped
} from './AdditionalAllocationData';
import type { ConflictAllocation } from './ConflictAllocation';
import {
  ConflictAllocationFromJSON,
  ConflictAllocationFromJSONTyped,
  ConflictAllocationToJSON,
  ConflictAllocationToJSONTyped
} from './ConflictAllocation';
import type { WorkedDays } from './WorkedDays';
import {
  WorkedDaysFromJSON,
  WorkedDaysFromJSONTyped,
  WorkedDaysToJSON,
  WorkedDaysToJSONTyped
} from './WorkedDays';

/**
 * @export
 * @interface AllocationsGrouped
 */
export interface AllocationsGrouped {
  /**
   * @memberof AllocationsGrouped
   * @type {number}
   */
  id?: number;
  /**
   * @memberof AllocationsGrouped
   * @type {string}
   */
  name?: string;
  /**
   * Use this field to display to the user
   *
   * @memberof AllocationsGrouped
   * @type {string}
   */
  label?: string;
  /**
   * This is the name field slugified
   *
   * @memberof AllocationsGrouped
   * @type {string}
   */
  slug?: string;
  /**
   * @memberof AllocationsGrouped
   * @type {ConflictAllocation[]}
   */
  allocations?: Array<ConflictAllocation>;
  /**
   * @memberof AllocationsGrouped
   * @type {WorkedDays}
   */
  workedDays?: WorkedDays;
  /**
   * @memberof AllocationsGrouped
   * @type {AdditionalAllocationData[]}
   */
  fields?: Array<AdditionalAllocationData> | null;
  /**
   * @memberof AllocationsGrouped
   * @type {Date}
   */
  createdAt?: Date;
  /**
   * @memberof AllocationsGrouped
   * @type {Date}
   */
  updatedAt?: Date;
}

/** Check if a given object implements the AllocationsGrouped interface. */
export function instanceOfAllocationsGrouped(
  value: object
): value is AllocationsGrouped {
  return true;
}

export function AllocationsGroupedFromJSON(json: any): AllocationsGrouped {
  return AllocationsGroupedFromJSONTyped(json, false);
}

export function AllocationsGroupedFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AllocationsGrouped {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    name: json['name'] == null ? undefined : json['name'],
    label: json['label'] == null ? undefined : json['label'],
    slug: json['slug'] == null ? undefined : json['slug'],
    allocations:
      json['allocations'] == null
        ? undefined
        : (json['allocations'] as Array<any>).map(ConflictAllocationFromJSON),
    workedDays: json['worked_days'] == null ? undefined : json['worked_days'],
    fields:
      json['fields'] == null
        ? undefined
        : (json['fields'] as Array<any>).map(AdditionalAllocationDataFromJSON),
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function AllocationsGroupedToJSON(json: any): AllocationsGrouped {
  return AllocationsGroupedToJSONTyped(json, false);
}

export function AllocationsGroupedToJSONTyped(
  value?: AllocationsGrouped | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    name: value['name'],
    label: value['label'],
    slug: value['slug'],
    allocations:
      value['allocations'] == null
        ? undefined
        : (value['allocations'] as Array<any>).map(ConflictAllocationToJSON),
    worked_days: value['workedDays'],
    fields:
      value['fields'] == null
        ? undefined
        : (value['fields'] as Array<any>).map(AdditionalAllocationDataToJSON),
    created_at:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updated_at:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString()
  };
}

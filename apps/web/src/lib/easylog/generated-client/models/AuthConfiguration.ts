/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { AuthConfigurationButtonLabels } from './AuthConfigurationButtonLabels';
import {
  AuthConfigurationButtonLabelsFromJSON,
  AuthConfigurationButtonLabelsFromJSONTyped,
  AuthConfigurationButtonLabelsToJSON,
  AuthConfigurationButtonLabelsToJSONTyped
} from './AuthConfigurationButtonLabels';
import type { AuthConfigurationEndpoints } from './AuthConfigurationEndpoints';
import {
  AuthConfigurationEndpointsFromJSON,
  AuthConfigurationEndpointsFromJSONTyped,
  AuthConfigurationEndpointsToJSON,
  AuthConfigurationEndpointsToJSONTyped
} from './AuthConfigurationEndpoints';

/**
 * @export
 * @interface AuthConfiguration
 */
export interface AuthConfiguration {
  /**
   * @memberof AuthConfiguration
   * @type {number}
   */
  id?: number;
  /**
   * @memberof AuthConfiguration
   * @type {string}
   */
  clientId?: string;
  /**
   * @memberof AuthConfiguration
   * @type {string}
   */
  name?: string;
  /**
   * @memberof AuthConfiguration
   * @type {string}
   */
  issuer?: string;
  /**
   * @memberof AuthConfiguration
   * @type {AuthConfigurationEndpoints}
   */
  endpoints?: AuthConfigurationEndpoints;
  /**
   * @memberof AuthConfiguration
   * @type {string[]}
   */
  scopes?: Array<string>;
  /**
   * @memberof AuthConfiguration
   * @type {AuthConfigurationButtonLabels}
   */
  buttonLabels?: AuthConfigurationButtonLabels;
  /**
   * Order for the sign in buttons
   *
   * @memberof AuthConfiguration
   * @type {number}
   */
  order?: number;
  /**
   * Wether or not the login option is hidden behind clicking on the apperto
   * logo
   *
   * @memberof AuthConfiguration
   * @type {boolean}
   */
  hidden?: boolean;
  /**
   * @memberof AuthConfiguration
   * @type {string}
   */
  image?: string | null;
  /**
   * @memberof AuthConfiguration
   * @type {Date}
   */
  updatedAt?: Date;
}

/** Check if a given object implements the AuthConfiguration interface. */
export function instanceOfAuthConfiguration(
  value: object
): value is AuthConfiguration {
  return true;
}

export function AuthConfigurationFromJSON(json: any): AuthConfiguration {
  return AuthConfigurationFromJSONTyped(json, false);
}

export function AuthConfigurationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): AuthConfiguration {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    clientId: json['client_id'] == null ? undefined : json['client_id'],
    name: json['name'] == null ? undefined : json['name'],
    issuer: json['issuer'] == null ? undefined : json['issuer'],
    endpoints:
      json['endpoints'] == null
        ? undefined
        : AuthConfigurationEndpointsFromJSON(json['endpoints']),
    scopes: json['scopes'] == null ? undefined : json['scopes'],
    buttonLabels:
      json['button_labels'] == null
        ? undefined
        : AuthConfigurationButtonLabelsFromJSON(json['button_labels']),
    order: json['order'] == null ? undefined : json['order'],
    hidden: json['hidden'] == null ? undefined : json['hidden'],
    image: json['image'] == null ? undefined : json['image'],
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function AuthConfigurationToJSON(json: any): AuthConfiguration {
  return AuthConfigurationToJSONTyped(json, false);
}

export function AuthConfigurationToJSONTyped(
  value?: AuthConfiguration | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    client_id: value['clientId'],
    name: value['name'],
    issuer: value['issuer'],
    endpoints: AuthConfigurationEndpointsToJSON(value['endpoints']),
    scopes: value['scopes'],
    button_labels: AuthConfigurationButtonLabelsToJSON(value['buttonLabels']),
    order: value['order'],
    hidden: value['hidden'],
    image: value['image'],
    updated_at:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString()
  };
}

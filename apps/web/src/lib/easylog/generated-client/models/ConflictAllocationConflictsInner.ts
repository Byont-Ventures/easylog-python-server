/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @export
 * @interface ConflictAllocationConflictsInner
 */
export interface ConflictAllocationConflictsInner {
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {number}
   */
  id?: number;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {string}
   */
  label?: string;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {number}
   */
  projectId?: number;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {string}
   */
  projectLabel?: string;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {string}
   */
  type?: string | null;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {string}
   */
  group?: string | null;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  start?: Date;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  end?: Date;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  conflictStart?: Date;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  conflictEnd?: Date;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  createdAt?: Date;
  /**
   * @memberof ConflictAllocationConflictsInner
   * @type {Date}
   */
  updatedAt?: Date;
}

/**
 * Check if a given object implements the ConflictAllocationConflictsInner
 * interface.
 */
export function instanceOfConflictAllocationConflictsInner(
  value: object
): value is ConflictAllocationConflictsInner {
  return true;
}

export function ConflictAllocationConflictsInnerFromJSON(
  json: any
): ConflictAllocationConflictsInner {
  return ConflictAllocationConflictsInnerFromJSONTyped(json, false);
}

export function ConflictAllocationConflictsInnerFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): ConflictAllocationConflictsInner {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    label: json['label'] == null ? undefined : json['label'],
    projectId: json['project_id'] == null ? undefined : json['project_id'],
    projectLabel:
      json['project_label'] == null ? undefined : json['project_label'],
    type: json['type'] == null ? undefined : json['type'],
    group: json['group'] == null ? undefined : json['group'],
    start: json['start'] == null ? undefined : new Date(json['start']),
    end: json['end'] == null ? undefined : new Date(json['end']),
    conflictStart:
      json['conflict_start'] == null
        ? undefined
        : new Date(json['conflict_start']),
    conflictEnd:
      json['conflict_end'] == null ? undefined : new Date(json['conflict_end']),
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function ConflictAllocationConflictsInnerToJSON(
  json: any
): ConflictAllocationConflictsInner {
  return ConflictAllocationConflictsInnerToJSONTyped(json, false);
}

export function ConflictAllocationConflictsInnerToJSONTyped(
  value?: ConflictAllocationConflictsInner | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    label: value['label'],
    project_id: value['projectId'],
    project_label: value['projectLabel'],
    type: value['type'],
    group: value['group'],
    start: value['start'] == null ? undefined : value['start'].toISOString(),
    end: value['end'] == null ? undefined : value['end'].toISOString(),
    conflict_start:
      value['conflictStart'] == null
        ? undefined
        : value['conflictStart'].toISOString(),
    conflict_end:
      value['conflictEnd'] == null
        ? undefined
        : value['conflictEnd'].toISOString(),
    created_at:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updated_at:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString()
  };
}

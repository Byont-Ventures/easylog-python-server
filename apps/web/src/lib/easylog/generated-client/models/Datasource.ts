/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { DatasourceResourceGroupsInner } from './DatasourceResourceGroupsInner';
import {
  DatasourceResourceGroupsInnerFromJSON,
  DatasourceResourceGroupsInnerFromJSONTyped,
  DatasourceResourceGroupsInnerToJSON,
  DatasourceResourceGroupsInnerToJSONTyped
} from './DatasourceResourceGroupsInner';
import type { DatasourceExtraDataFieldsInner } from './DatasourceExtraDataFieldsInner';
import {
  DatasourceExtraDataFieldsInnerFromJSON,
  DatasourceExtraDataFieldsInnerFromJSONTyped,
  DatasourceExtraDataFieldsInnerToJSON,
  DatasourceExtraDataFieldsInnerToJSONTyped
} from './DatasourceExtraDataFieldsInner';
import type { AllocationTypesAllocationTypesInner } from './AllocationTypesAllocationTypesInner';
import {
  AllocationTypesAllocationTypesInnerFromJSON,
  AllocationTypesAllocationTypesInnerFromJSONTyped,
  AllocationTypesAllocationTypesInnerToJSON,
  AllocationTypesAllocationTypesInnerToJSONTyped
} from './AllocationTypesAllocationTypesInner';
import type { DatasourceFieldsInner } from './DatasourceFieldsInner';
import {
  DatasourceFieldsInnerFromJSON,
  DatasourceFieldsInnerFromJSONTyped,
  DatasourceFieldsInnerToJSON,
  DatasourceFieldsInnerToJSONTyped
} from './DatasourceFieldsInner';

/**
 * @export
 * @interface Datasource
 */
export interface Datasource {
  /**
   * @memberof Datasource
   * @type {number}
   */
  id?: number;
  /**
   * @memberof Datasource
   * @type {number}
   */
  categoryId?: number;
  /**
   * @memberof Datasource
   * @type {string}
   */
  name?: string;
  /**
   * @memberof Datasource
   * @type {string}
   */
  description?: string;
  /**
   * @memberof Datasource
   * @type {string}
   */
  slug?: string;
  /**
   * @memberof Datasource
   * @type {DatasourceResourceGroupsInner[]}
   */
  resourceGroups?: Array<DatasourceResourceGroupsInner> | null;
  /**
   * @memberof Datasource
   * @type {DatasourceExtraDataFieldsInner[]}
   */
  extraDataFields?: Array<DatasourceExtraDataFieldsInner> | null;
  /**
   * @memberof Datasource
   * @type {DatasourceFieldsInner[]}
   */
  fields?: Array<DatasourceFieldsInner>;
  /**
   * @memberof Datasource
   * @type {AllocationTypesAllocationTypesInner[]}
   */
  allocationTypes?: Array<AllocationTypesAllocationTypesInner> | null;
  /**
   * @memberof Datasource
   * @type {Date}
   */
  createdAt?: Date;
  /**
   * @memberof Datasource
   * @type {Date}
   */
  updatedAt?: Date;
}

/** Check if a given object implements the Datasource interface. */
export function instanceOfDatasource(value: object): value is Datasource {
  return true;
}

export function DatasourceFromJSON(json: any): Datasource {
  return DatasourceFromJSONTyped(json, false);
}

export function DatasourceFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): Datasource {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    categoryId: json['category_id'] == null ? undefined : json['category_id'],
    name: json['name'] == null ? undefined : json['name'],
    description: json['description'] == null ? undefined : json['description'],
    slug: json['slug'] == null ? undefined : json['slug'],
    resourceGroups:
      json['resource_groups'] == null
        ? undefined
        : (json['resource_groups'] as Array<any>).map(
            DatasourceResourceGroupsInnerFromJSON
          ),
    extraDataFields:
      json['extra_data_fields'] == null
        ? undefined
        : (json['extra_data_fields'] as Array<any>).map(
            DatasourceExtraDataFieldsInnerFromJSON
          ),
    fields:
      json['fields'] == null
        ? undefined
        : (json['fields'] as Array<any>).map(DatasourceFieldsInnerFromJSON),
    allocationTypes:
      json['allocation_types'] == null
        ? undefined
        : (json['allocation_types'] as Array<any>).map(
            AllocationTypesAllocationTypesInnerFromJSON
          ),
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function DatasourceToJSON(json: any): Datasource {
  return DatasourceToJSONTyped(json, false);
}

export function DatasourceToJSONTyped(
  value?: Datasource | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    category_id: value['categoryId'],
    name: value['name'],
    description: value['description'],
    slug: value['slug'],
    resource_groups:
      value['resourceGroups'] == null
        ? undefined
        : (value['resourceGroups'] as Array<any>).map(
            DatasourceResourceGroupsInnerToJSON
          ),
    extra_data_fields:
      value['extraDataFields'] == null
        ? undefined
        : (value['extraDataFields'] as Array<any>).map(
            DatasourceExtraDataFieldsInnerToJSON
          ),
    fields:
      value['fields'] == null
        ? undefined
        : (value['fields'] as Array<any>).map(DatasourceFieldsInnerToJSON),
    allocation_types:
      value['allocationTypes'] == null
        ? undefined
        : (value['allocationTypes'] as Array<any>).map(
            AllocationTypesAllocationTypesInnerToJSON
          ),
    created_at:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updated_at:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString()
  };
}

/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
import type { AdditionalAllocationData } from './AdditionalAllocationData';
import {
  AdditionalAllocationDataFromJSON,
  AdditionalAllocationDataFromJSONTyped,
  AdditionalAllocationDataToJSON,
  AdditionalAllocationDataToJSONTyped
} from './AdditionalAllocationData';
import type { DatasourceProject } from './DatasourceProject';
import {
  DatasourceProjectFromJSON,
  DatasourceProjectFromJSONTyped,
  DatasourceProjectToJSON,
  DatasourceProjectToJSONTyped
} from './DatasourceProject';
import type { DatasourceResource } from './DatasourceResource';
import {
  DatasourceResourceFromJSON,
  DatasourceResourceFromJSONTyped,
  DatasourceResourceToJSON,
  DatasourceResourceToJSONTyped
} from './DatasourceResource';

/**
 * Project and resource can be left out by server if that is better for resource
 * usage
 *
 * @export
 * @interface DatasourceAllocation
 */
export interface DatasourceAllocation {
  /**
   * @memberof DatasourceAllocation
   * @type {number}
   */
  id?: number;
  /**
   * @memberof DatasourceAllocation
   * @type {number}
   */
  projectId?: number;
  /**
   * @memberof DatasourceAllocation
   * @type {number}
   */
  resourceId?: number;
  /**
   * @memberof DatasourceAllocation
   * @type {string}
   */
  group?: string;
  /**
   * @memberof DatasourceAllocation
   * @type {string}
   */
  type?: string;
  /**
   * @memberof DatasourceAllocation
   * @type {string}
   */
  comment?: string;
  /**
   * @memberof DatasourceAllocation
   * @type {Date}
   */
  start?: Date;
  /**
   * @memberof DatasourceAllocation
   * @type {Date}
   */
  end?: Date;
  /**
   * @memberof DatasourceAllocation
   * @type {AdditionalAllocationData[]}
   */
  fields?: Array<AdditionalAllocationData> | null;
  /**
   * @memberof DatasourceAllocation
   * @type {DatasourceProject}
   */
  project?: DatasourceProject;
  /**
   * @memberof DatasourceAllocation
   * @type {DatasourceResource}
   */
  resource?: DatasourceResource;
  /**
   * @memberof DatasourceAllocation
   * @type {number}
   */
  parentId?: number | null;
  /**
   * @memberof DatasourceAllocation
   * @type {number}
   */
  children?: number | null;
  /**
   * @memberof DatasourceAllocation
   * @type {Date}
   */
  createdAt?: Date;
  /**
   * @memberof DatasourceAllocation
   * @type {Date}
   */
  updatedAt?: Date;
}

/** Check if a given object implements the DatasourceAllocation interface. */
export function instanceOfDatasourceAllocation(
  value: object
): value is DatasourceAllocation {
  return true;
}

export function DatasourceAllocationFromJSON(json: any): DatasourceAllocation {
  return DatasourceAllocationFromJSONTyped(json, false);
}

export function DatasourceAllocationFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DatasourceAllocation {
  if (json == null) {
    return json;
  }
  return {
    id: json['id'] == null ? undefined : json['id'],
    projectId: json['project_id'] == null ? undefined : json['project_id'],
    resourceId: json['resource_id'] == null ? undefined : json['resource_id'],
    group: json['group'] == null ? undefined : json['group'],
    type: json['type'] == null ? undefined : json['type'],
    comment: json['comment'] == null ? undefined : json['comment'],
    start: json['start'] == null ? undefined : new Date(json['start']),
    end: json['end'] == null ? undefined : new Date(json['end']),
    fields:
      json['fields'] == null
        ? undefined
        : (json['fields'] as Array<any>).map(AdditionalAllocationDataFromJSON),
    project:
      json['project'] == null
        ? undefined
        : DatasourceProjectFromJSON(json['project']),
    resource:
      json['resource'] == null
        ? undefined
        : DatasourceResourceFromJSON(json['resource']),
    parentId: json['parent_id'] == null ? undefined : json['parent_id'],
    children: json['children'] == null ? undefined : json['children'],
    createdAt:
      json['created_at'] == null ? undefined : new Date(json['created_at']),
    updatedAt:
      json['updated_at'] == null ? undefined : new Date(json['updated_at'])
  };
}

export function DatasourceAllocationToJSON(json: any): DatasourceAllocation {
  return DatasourceAllocationToJSONTyped(json, false);
}

export function DatasourceAllocationToJSONTyped(
  value?: DatasourceAllocation | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    id: value['id'],
    project_id: value['projectId'],
    resource_id: value['resourceId'],
    group: value['group'],
    type: value['type'],
    comment: value['comment'],
    start: value['start'] == null ? undefined : value['start'].toISOString(),
    end: value['end'] == null ? undefined : value['end'].toISOString(),
    fields:
      value['fields'] == null
        ? undefined
        : (value['fields'] as Array<any>).map(AdditionalAllocationDataToJSON),
    project: DatasourceProjectToJSON(value['project']),
    resource: DatasourceResourceToJSON(value['resource']),
    parent_id: value['parentId'],
    children: value['children'],
    created_at:
      value['createdAt'] == null ? undefined : value['createdAt'].toISOString(),
    updated_at:
      value['updatedAt'] == null ? undefined : value['updatedAt'].toISOString()
  };
}

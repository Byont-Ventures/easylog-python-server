/* tslint:disable */
/* eslint-disable */
/**
 * Easylog No description provided (generated by Openapi Generator
 * https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.2.0
 *
 * NOTE: This class is auto generated by OpenAPI Generator
 * (https://openapi-generator.tech). https://openapi-generator.tech Do not edit
 * the class manually.
 */

import { mapValues } from '../runtime';
/**
 * @export
 * @interface DatasourceAllocationBody
 */
export interface DatasourceAllocationBody {
  /**
   * @memberof DatasourceAllocationBody
   * @type {number}
   */
  projectId: number;
  /**
   * @memberof DatasourceAllocationBody
   * @type {number}
   */
  resourceId: number;
  /**
   * @memberof DatasourceAllocationBody
   * @type {Date}
   */
  start: Date;
  /**
   * @memberof DatasourceAllocationBody
   * @type {Date}
   */
  end: Date;
  /**
   * @memberof DatasourceAllocationBody
   * @type {string}
   */
  group?: string | null;
  /**
   * @memberof DatasourceAllocationBody
   * @type {string}
   */
  type?: string | null;
  /**
   * @memberof DatasourceAllocationBody
   * @type {string}
   */
  comment?: string | null;
}

/** Check if a given object implements the DatasourceAllocationBody interface. */
export function instanceOfDatasourceAllocationBody(
  value: object
): value is DatasourceAllocationBody {
  if (!('projectId' in value) || value['projectId'] === undefined) return false;
  if (!('resourceId' in value) || value['resourceId'] === undefined)
    return false;
  if (!('start' in value) || value['start'] === undefined) return false;
  if (!('end' in value) || value['end'] === undefined) return false;
  return true;
}

export function DatasourceAllocationBodyFromJSON(
  json: any
): DatasourceAllocationBody {
  return DatasourceAllocationBodyFromJSONTyped(json, false);
}

export function DatasourceAllocationBodyFromJSONTyped(
  json: any,
  ignoreDiscriminator: boolean
): DatasourceAllocationBody {
  if (json == null) {
    return json;
  }
  return {
    projectId: json['project_id'],
    resourceId: json['resource_id'],
    start: new Date(json['start']),
    end: new Date(json['end']),
    group: json['group'] == null ? undefined : json['group'],
    type: json['type'] == null ? undefined : json['type'],
    comment: json['comment'] == null ? undefined : json['comment']
  };
}

export function DatasourceAllocationBodyToJSON(
  json: any
): DatasourceAllocationBody {
  return DatasourceAllocationBodyToJSONTyped(json, false);
}

export function DatasourceAllocationBodyToJSONTyped(
  value?: DatasourceAllocationBody | null,
  ignoreDiscriminator: boolean = false
): any {
  if (value == null) {
    return value;
  }

  return {
    project_id: value['projectId'],
    resource_id: value['resourceId'],
    start: value['start'].toISOString(),
    end: value['end'].toISOString(),
    group: value['group'],
    type: value['type'],
    comment: value['comment']
  };
}
